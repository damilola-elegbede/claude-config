#!/usr/bin/env bash
# Claude Platform Validation CLI
# Developer-friendly command-line interface for validation system
set -euo pipefail

VERSION="1.0.0"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(git rev-parse --show-toplevel 2>/dev/null || pwd)"
CONFIG_DIR="$HOME/.claude-validate"
CACHE_DIR="$CONFIG_DIR/cache"
LOG_DIR="$CONFIG_DIR/logs"

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[0;33m'
readonly BLUE='\033[0;34m'
readonly PURPLE='\033[0;35m'
readonly CYAN='\033[0;36m'
readonly NC='\033[0m' # No Color

# Emoji support check
if [[ "${LANG:-}" =~ UTF-8 ]] || [[ "${LC_ALL:-}" =~ UTF-8 ]]; then
    readonly CHECK="✅"
    readonly CROSS="❌"
    readonly WARN="⚠️"
    readonly INFO="ℹ️"
    readonly ROCKET="🚀"
    readonly GEAR="⚙️"
    readonly CLOCK="⏱️"
    readonly MAGNIFY="🔍"
else
    readonly CHECK="[OK]"
    readonly CROSS="[ERROR]"
    readonly WARN="[WARN]"
    readonly INFO="[INFO]"
    readonly ROCKET="[LAUNCH]"
    readonly GEAR="[CONFIG]"
    readonly CLOCK="[TIMING]"
    readonly MAGNIFY="[SEARCH]"
fi

# Initialize configuration
init_config() {
    mkdir -p "$CONFIG_DIR" "$CACHE_DIR" "$LOG_DIR"
    
    if [[ ! -f "$CONFIG_DIR/config.yaml" ]]; then
        cat > "$CONFIG_DIR/config.yaml" << 'EOF'
# Claude Validate Configuration
settings:
  parallel_validation: true
  max_parallel_jobs: 4
  cache_enabled: true
  metrics_enabled: true
  performance_monitoring: true
  notification_sound: true

validation:
  yaml:
    enabled: true
    strict_mode: false
  format:
    enabled: true
    auto_fix: false
  security:
    enabled: true
    strict_secrets: true
  docs:
    enabled: true
    check_links: true

performance:
  file_size_limit: "10MB"
  timeout_seconds: 300
  cache_ttl_hours: 24

developer_tools:
  auto_suggest_fixes: true
  show_performance_tips: true
  integration_warnings: true
EOF
    fi
}

# Logging functions
log() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    case $level in
        ERROR) echo -e "${RED}${CROSS} $message${NC}" ;;
        WARN)  echo -e "${YELLOW}${WARN} $message${NC}" ;;
        INFO)  echo -e "${BLUE}${INFO} $message${NC}" ;;
        SUCCESS) echo -e "${GREEN}${CHECK} $message${NC}" ;;
        DEBUG) [[ "${CLAUDE_VALIDATE_DEBUG:-}" == "1" ]] && echo -e "${PURPLE}[DEBUG] $message${NC}" ;;
    esac
    
    # Log to file
    echo "[$timestamp] [$level] $message" >> "$LOG_DIR/claude-validate.log"
}

# Performance monitoring
start_timer() {
    echo $SECONDS
}

end_timer() {
    local start_time=$1
    local duration=$((SECONDS - start_time))
    echo $duration
}

# Configuration management
get_config() {
    local key="$1"
    local default="${2:-}"
    
    if command -v yq >/dev/null 2>&1 && [[ -f "$CONFIG_DIR/config.yaml" ]]; then
        yq eval "$key // \"$default\"" "$CONFIG_DIR/config.yaml" 2>/dev/null || echo "$default"
    else
        echo "$default"
    fi
}

# Cache management
get_cache_key() {
    local validation_type="$1"
    local files="$2"
    echo "$validation_type:$(echo "$files" | sort | sha256sum | cut -d' ' -f1)"
}

is_cache_valid() {
    local cache_file="$1"
    local ttl_hours=$(get_config ".performance.cache_ttl_hours" "24")
    
    if [[ -f "$cache_file" ]]; then
        local cache_age=$(($(date +%s) - $(stat -c %Y "$cache_file" 2>/dev/null || stat -f %m "$cache_file" 2>/dev/null || echo 0)))
        local ttl_seconds=$((ttl_hours * 3600))
        [[ $cache_age -lt $ttl_seconds ]]
    else
        return 1
    fi
}

# Parallel execution helper
run_parallel() {
    local max_jobs=$(get_config ".settings.max_parallel_jobs" "4")
    local job_count=0
    local pids=()
    
    while IFS= read -r line; do
        if [[ -n "$line" ]]; then
            eval "$line" &
            pids+=($!)
            ((job_count++))
            
            if [[ $job_count -ge $max_jobs ]]; then
                wait "${pids[0]}"
                pids=("${pids[@]:1}")
                ((job_count--))
            fi
        fi
    done
    
    # Wait for remaining jobs
    for pid in "${pids[@]}"; do
        wait "$pid"
    done
}

# Validation functions
validate_yaml() {
    local files="$1"
    local start_time=$(start_timer)
    local cache_enabled=$(get_config ".settings.cache_enabled" "true")
    
    log INFO "Validating YAML front-matter..."
    
    if [[ "$cache_enabled" == "true" ]]; then
        local cache_key=$(get_cache_key "yaml" "$files")
        local cache_file="$CACHE_DIR/$cache_key"
        
        if is_cache_valid "$cache_file"; then
            log INFO "Using cached YAML validation results"
            local duration=$(end_timer $start_time)
            log SUCCESS "YAML validation completed (cached, ${duration}s)"
            return 0
        fi
    fi
    
    local validation_failed=false
    local files_processed=0
    
    if [[ -n "$files" ]]; then
        echo "$files" | while IFS= read -r file; do
            if [[ -f "$file" ]]; then
                if ! "$REPO_ROOT/scripts/validation/framework.sh" validate_yaml_frontmatter "$file" >/dev/null 2>&1; then
                    log ERROR "YAML validation failed for $file"
                    validation_failed=true
                fi
                ((files_processed++))
            fi
        done | run_parallel
        
        if [[ "$cache_enabled" == "true" ]]; then
            touch "$cache_file"
        fi
    fi
    
    local duration=$(end_timer $start_time)
    
    if [[ "$validation_failed" == "false" ]]; then
        log SUCCESS "YAML validation completed ($files_processed files, ${duration}s)"
        return 0
    else
        log ERROR "YAML validation failed ($files_processed files, ${duration}s)"
        return 1
    fi
}

# Performance analysis
analyze_performance() {
    local validation_type="$1"
    local duration="$2"
    local files_count="$3"
    
    local avg_time_per_file=0
    if [[ $files_count -gt 0 ]]; then
        avg_time_per_file=$((duration * 1000 / files_count))  # milliseconds
    fi
    
    log INFO "Performance: $validation_type took ${duration}s for $files_count files (${avg_time_per_file}ms/file)"
    
    # Performance recommendations
    if [[ $avg_time_per_file -gt 500 ]]; then
        log WARN "Performance tip: Consider enabling caching or reducing file size"
    fi
    
    if [[ $files_count -gt 50 ]] && [[ $(get_config ".settings.parallel_validation" "true") == "false" ]]; then
        log WARN "Performance tip: Enable parallel validation for large file sets"
    fi
}

# Integration helpers
check_git_integration() {
    local hooks_dir="$REPO_ROOT/.git/hooks"
    local hook_types=("pre-commit" "commit-msg" "pre-push")
    
    log INFO "Checking Git integration..."
    
    for hook in "${hook_types[@]}"; do
        if [[ -x "$hooks_dir/$hook" ]]; then
            log SUCCESS "Git $hook hook is installed and executable"
        else
            log WARN "Git $hook hook is not installed. Run: claude-validate setup"
        fi
    done
}

check_ci_integration() {
    log INFO "Checking CI/CD integration..."
    
    local ci_configs=(
        ".github/workflows/validate.yml"
        ".gitlab-ci.yml"
        "Jenkinsfile"
        ".circleci/config.yml"
    )
    
    local found_ci=false
    for config in "${ci_configs[@]}"; do
        if [[ -f "$REPO_ROOT/$config" ]]; then
            log SUCCESS "Found CI configuration: $config"
            found_ci=true
        fi
    done
    
    if [[ "$found_ci" == "false" ]]; then
        log WARN "No CI/CD configuration found. Consider setting up automated validation."
    fi
}

# Command handlers
cmd_validate() {
    local validation_types=("${@:-yaml format security docs}")
    local start_time=$(start_timer)
    local exit_code=0
    
    log INFO "${ROCKET} Starting validation pipeline..."
    
    # Load validation framework
    if [[ ! -f "$REPO_ROOT/scripts/validation/framework.sh" ]]; then
        log ERROR "Validation framework not found. Run: claude-validate setup"
        return 1
    fi
    
    source "$REPO_ROOT/scripts/validation/framework.sh"
    
    # Get files to validate
    local files_to_check
    if git diff --cached --name-only >/dev/null 2>&1; then
        files_to_check=$(git diff --cached --name-only --diff-filter=ACM)
    else
        files_to_check=$(find "$REPO_ROOT" -type f \( -name "*.md" -o -name "*.sh" -o -name "*.yml" -o -name "*.yaml" \))
    fi
    
    if [[ -z "$files_to_check" ]]; then
        log INFO "No files to validate"
        return 0
    fi
    
    local files_count=$(echo "$files_to_check" | wc -l)
    log INFO "Validating $files_count files..."
    
    # Run validations
    for validation_type in "${validation_types[@]}"; do
        local validation_start=$(start_timer)
        
        case "$validation_type" in
            yaml)
                if ! validate_yaml "$files_to_check"; then
                    exit_code=1
                fi
                ;;
            format|security|docs)
                if ! run_validation "$validation_type" "${validation_type^} validation"; then
                    exit_code=1
                fi
                ;;
            *)
                log ERROR "Unknown validation type: $validation_type"
                exit_code=1
                ;;
        esac
        
        local validation_duration=$(end_timer $validation_start)
        analyze_performance "$validation_type" "$validation_duration" "$files_count"
    done
    
    local total_duration=$(end_timer $start_time)
    
    if [[ "$exit_code" -eq 0 ]]; then
        log SUCCESS "${CHECK} All validations passed in ${total_duration}s"
        
        # Play success sound if enabled
        if [[ $(get_config ".settings.notification_sound" "true") == "true" ]]; then
            if [[ "$(uname -s)" == "Darwin" ]] && command -v afplay >/dev/null 2>&1; then
                afplay /System/Library/Sounds/Glass.aiff 2>/dev/null &
            fi
        fi
    else
        log ERROR "${CROSS} Validation failed in ${total_duration}s"
        echo
        log INFO "Quick fixes available:"
        log INFO "  claude-validate fix --auto  # Auto-fix common issues"
        log INFO "  claude-validate doctor      # Check environment setup"
        log INFO "  claude-validate help        # Show all commands"
    fi
    
    return $exit_code
}

cmd_setup() {
    log INFO "${GEAR} Setting up Claude validation platform..."
    
    init_config
    
    # Install git hooks
    if [[ -f "$REPO_ROOT/scripts/install-hooks.sh" ]]; then
        log INFO "Installing Git hooks..."
        "$REPO_ROOT/scripts/install-hooks.sh"
    else
        log WARN "Git hooks installer not found"
    fi
    
    # Check system dependencies
    local missing_deps=()
    local deps=("git" "make" "bash")
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" >/dev/null 2>&1; then
            missing_deps+=("$dep")
        fi
    done
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        log ERROR "Missing dependencies: ${missing_deps[*]}"
        log INFO "Please install missing dependencies and run setup again"
        return 1
    fi
    
    # Create desktop integration (optional)
    if [[ "$(uname -s)" == "Darwin" ]]; then
        local app_dir="/Applications/Claude Validate.app"
        if [[ ! -d "$app_dir" ]]; then
            log INFO "Creating desktop integration..."
            # Could create a simple .app bundle here
        fi
    fi
    
    log SUCCESS "Setup completed successfully!"
    log INFO "Next steps:"
    log INFO "  1. Run: claude-validate doctor"
    log INFO "  2. Test: claude-validate validate"
    log INFO "  3. Integrate with your workflow"
}

cmd_doctor() {
    log INFO "${MAGNIFY} Running environment diagnostics..."
    
    local issues=0
    local warnings=0
    
    # Check Git repository
    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        log ERROR "Not inside a Git repository"
        ((issues++))
    else
        log SUCCESS "Git repository detected"
    fi
    
    # Check validation framework
    if [[ -f "$REPO_ROOT/scripts/validation/framework.sh" ]]; then
        log SUCCESS "Validation framework available"
    else
        log ERROR "Validation framework missing"
        ((issues++))
    fi
    
    # Check Git hooks
    check_git_integration
    
    # Check CI integration
    check_ci_integration
    
    # Check system dependencies
    local tools=("yq:YAML processor" "shellcheck:Shell linter" "python3:Python interpreter")
    for tool_info in "${tools[@]}"; do
        IFS=':' read -r tool description <<< "$tool_info"
        if command -v "$tool" >/dev/null 2>&1; then
            log SUCCESS "$description available"
        else
            log WARN "$description not found"
            ((warnings++))
        fi
    done
    
    # Performance check
    local cache_size=$(du -sh "$CACHE_DIR" 2>/dev/null | cut -f1 || echo "0B")
    log INFO "Cache size: $cache_size"
    
    # Configuration check
    if [[ -f "$CONFIG_DIR/config.yaml" ]]; then
        log SUCCESS "Configuration file exists"
    else
        log WARN "Configuration file not found"
        ((warnings++))
    fi
    
    # Summary
    echo
    log INFO "Diagnostics Summary:"
    log INFO "==================="
    
    if [[ $issues -eq 0 ]]; then
        if [[ $warnings -eq 0 ]]; then
            log SUCCESS "Environment is perfectly configured!"
        else
            log WARN "Environment is mostly ready ($warnings warnings)"
        fi
    else
        log ERROR "Environment has $issues critical issues"
        log INFO "Run: claude-validate setup"
        return 1
    fi
}

cmd_fix() {
    local auto_fix="${1:-false}"
    
    log INFO "${GEAR} Running auto-fix procedures..."
    
    if [[ "$auto_fix" == "--auto" ]] || [[ "$auto_fix" == "true" ]]; then
        log INFO "Attempting automatic fixes..."
        
        # Run make fix-all if available
        if [[ -f "$REPO_ROOT/Makefile" ]]; then
            cd "$REPO_ROOT"
            if make fix-all >/dev/null 2>&1; then
                log SUCCESS "Auto-fix completed successfully"
            else
                log ERROR "Auto-fix encountered errors"
                return 1
            fi
        else
            log WARN "Makefile not found, manual fixes may be needed"
        fi
    else
        log INFO "Manual fix suggestions:"
        log INFO "  1. YAML issues: Check front-matter syntax"
        log INFO "  2. Format issues: Run shellcheck on scripts"
        log INFO "  3. Security issues: Remove any exposed secrets"
        log INFO "  4. Documentation issues: Fix broken links"
        echo
        log INFO "Run with --auto to attempt automatic fixes"
    fi
}

cmd_status() {
    log INFO "Claude Validation Status"
    log INFO "========================"
    
    # Repository info
    local repo_name=$(basename "$REPO_ROOT")
    local branch=$(git symbolic-ref --short HEAD 2>/dev/null || echo "detached")
    local uncommitted=$(git status --porcelain | wc -l)
    
    log INFO "Repository: $repo_name"
    log INFO "Branch: $branch"
    log INFO "Uncommitted changes: $uncommitted"
    
    # File counts
    local agent_count=$(find "$REPO_ROOT/.claude/agents" -name "*.md" 2>/dev/null | wc -l || echo 0)
    local script_count=$(find "$REPO_ROOT/scripts" -name "*.sh" 2>/dev/null | wc -l || echo 0)
    local doc_count=$(find "$REPO_ROOT/docs" -name "*.md" 2>/dev/null | wc -l || echo 0)
    
    log INFO "Agents: $agent_count"
    log INFO "Scripts: $script_count"
    log INFO "Docs: $doc_count"
    
    # Validation status
    if cmd_validate >/dev/null 2>&1; then
        log SUCCESS "Validation: Passing"
    else
        log ERROR "Validation: Failing"
    fi
    
    # Performance metrics
    local cache_size=$(du -sh "$CACHE_DIR" 2>/dev/null | cut -f1 || echo "0B")
    log INFO "Cache size: $cache_size"
    
    # Recent activity
    local last_validation=$(ls -t "$LOG_DIR"/*.log 2>/dev/null | head -1 | xargs stat -c %y 2>/dev/null || echo "Never")
    log INFO "Last validation: $last_validation"
}

cmd_config() {
    local action="${1:-show}"
    local key="$2"
    local value="$3"
    
    case "$action" in
        show)
            if [[ -f "$CONFIG_DIR/config.yaml" ]]; then
                log INFO "Current configuration:"
                cat "$CONFIG_DIR/config.yaml"
            else
                log WARN "Configuration file not found"
            fi
            ;;
        get)
            if [[ -n "$key" ]]; then
                local result=$(get_config "$key")
                echo "$result"
            else
                log ERROR "Key required for get operation"
                return 1
            fi
            ;;
        set)
            if [[ -n "$key" ]] && [[ -n "$value" ]]; then
                if command -v yq >/dev/null 2>&1; then
                    yq eval "$key = \"$value\"" -i "$CONFIG_DIR/config.yaml"
                    log SUCCESS "Configuration updated: $key = $value"
                else
                    log ERROR "yq required for configuration updates"
                    return 1
                fi
            else
                log ERROR "Key and value required for set operation"
                return 1
            fi
            ;;
        reset)
            rm -f "$CONFIG_DIR/config.yaml"
            init_config
            log SUCCESS "Configuration reset to defaults"
            ;;
        *)
            log ERROR "Unknown config action: $action"
            log INFO "Available actions: show, get, set, reset"
            return 1
            ;;
    esac
}

cmd_cache() {
    local action="${1:-status}"
    
    case "$action" in
        status)
            local cache_size=$(du -sh "$CACHE_DIR" 2>/dev/null | cut -f1 || echo "0B")
            local cache_files=$(find "$CACHE_DIR" -type f 2>/dev/null | wc -l || echo 0)
            
            log INFO "Cache Status:"
            log INFO "  Size: $cache_size"
            log INFO "  Files: $cache_files"
            log INFO "  Location: $CACHE_DIR"
            ;;
        clear)
            rm -rf "$CACHE_DIR"/*
            log SUCCESS "Cache cleared"
            ;;
        disable)
            cmd_config set ".settings.cache_enabled" "false"
            ;;
        enable)
            cmd_config set ".settings.cache_enabled" "true"
            ;;
        *)
            log ERROR "Unknown cache action: $action"
            log INFO "Available actions: status, clear, disable, enable"
            return 1
            ;;
    esac
}

cmd_help() {
    echo -e "${BLUE}Claude Platform Validation CLI v$VERSION${NC}"
    echo "==============================================="
    echo
    echo -e "${GREEN}USAGE:${NC}"
    echo "  claude-validate <command> [options]"
    echo
    echo -e "${GREEN}COMMANDS:${NC}"
    echo "  validate [types...]   Run validation (yaml, format, security, docs)"
    echo "  setup                 Setup validation environment"
    echo "  doctor               Check environment health"
    echo "  fix [--auto]         Fix validation issues"
    echo "  status               Show validation status"
    echo "  config <action>      Manage configuration"
    echo "  cache <action>       Manage validation cache"
    echo "  help                 Show this help message"
    echo
    echo -e "${GREEN}EXAMPLES:${NC}"
    echo "  claude-validate validate           # Run all validations"
    echo "  claude-validate validate yaml      # Run only YAML validation"
    echo "  claude-validate setup              # Setup environment"
    echo "  claude-validate doctor             # Check system health"
    echo "  claude-validate fix --auto         # Auto-fix issues"
    echo "  claude-validate config show        # Show configuration"
    echo "  claude-validate cache clear        # Clear validation cache"
    echo
    echo -e "${GREEN}ENVIRONMENT VARIABLES:${NC}"
    echo "  CLAUDE_VALIDATE_DEBUG=1            Enable debug output"
    echo "  CLAUDE_VALIDATE_NO_COLOR=1         Disable colored output"
    echo
    echo -e "${GREEN}CONFIGURATION:${NC}"
    echo "  Config file: $CONFIG_DIR/config.yaml"
    echo "  Cache dir:   $CACHE_DIR"
    echo "  Log dir:     $LOG_DIR"
}

# Main command dispatcher
main() {
    # Handle color disable
    if [[ "${CLAUDE_VALIDATE_NO_COLOR:-}" == "1" ]]; then
        RED="" GREEN="" YELLOW="" BLUE="" PURPLE="" CYAN="" NC=""
    fi
    
    # Initialize configuration
    init_config
    
    local command="${1:-help}"
    shift || true
    
    case "$command" in
        validate|v)     cmd_validate "$@" ;;
        setup|s)        cmd_setup "$@" ;;
        doctor|d)       cmd_doctor "$@" ;;
        fix|f)          cmd_fix "$@" ;;
        status|st)      cmd_status "$@" ;;
        config|c)       cmd_config "$@" ;;
        cache)          cmd_cache "$@" ;;
        help|h|-h|--help) cmd_help ;;
        version|-v|--version) echo "claude-validate v$VERSION" ;;
        *)
            log ERROR "Unknown command: $command"
            echo "Run 'claude-validate help' for usage information"
            return 1
            ;;
    esac
}

# Execute main function
main "$@"