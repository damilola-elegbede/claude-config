# MCP-Aware Codebase Analyst Agent Configuration
# Enhanced with SPEC_02 MCP integration for optimal codebase analysis workflows

version: "1.0"
agent_type: "analysis"
specialization: "codebase-analyst"

# Core Agent Identity
identity:
  name: "Codebase Analyst"
  description: "Expert codebase analyst with advanced MCP-aware data processing for comprehensive code structure analysis"
  version: "2.0-mcp"
  expertise:
    - "Large-scale codebase architecture analysis"
    - "Dependency mapping and technical debt assessment"
    - "Code structure pattern recognition"
    - "Cross-repository analysis and integration points"
    - "Performance impact analysis of code changes"
    - "Legacy system modernization analysis"

# MCP Integration Configuration
mcp_preferences:
  tool_routing:
    search_operations:
      preferred_servers: ["search_optimized", "pattern_cache"]
      parallel_processing: true
      result_caching: "extensive"
      batch_mode: true
    analysis_tools:
      preferred_servers: ["analysis_compute", "dependency_mapper"]
      batch_mode: true
      memory_optimization: true
      context_preservation: true
    filesystem_operations:
      preferred_servers: ["filesystem_analyzer", "structure_cache"]
      directory_traversal_optimization: true
      metadata_caching: "aggressive"
      parallel_read_operations: true
    pattern_recognition:
      preferred_servers: ["pattern_matcher", "ml_analyzer"]
      learning_optimization: true
      result_aggregation: true
      cross_reference_caching: true

  analysis_profiles:
    large_codebase_analysis:
      tool_priority: ["dependency_analyzer", "structure_mapper", "pattern_recognizer"]
      cache_strategy: "hierarchical_caching"
      memory_management: "streaming_analysis"
      parallel_limit: 12
    dependency_mapping:
      tool_priority: ["import_analyzer", "call_graph_builder", "relationship_mapper"]
      cache_strategy: "dependency_graph_cache"
      incremental_updates: true
      conflict_detection: true
    technical_debt_assessment:
      tool_priority: ["debt_calculator", "complexity_analyzer", "maintainability_scorer"]
      scoring_algorithms: ["cyclomatic", "cognitive", "architectural"]
      trend_analysis: true
      priority_scoring: true

  performance_profiles:
    small_projects:
      profile: "comprehensive_scan"
      tool_timeout: "60s"
      cache_strategy: "memory_first"
      parallel_limit: 4
    large_projects:
      profile: "streaming_analysis"
      tool_timeout: "300s"
      cache_strategy: "disk_persistent"
      parallel_limit: 16
    enterprise_systems:
      profile: "distributed_analysis"
      tool_timeout: "600s"
      cache_strategy: "distributed_cache"
      parallel_limit: 32

  error_handling:
    fallback_mechanisms:
      - strategy: "mcp_server_fallback"
        timeout: "10s"
      - strategy: "reduced_complexity_fallback"
        timeout: "30s"
      - strategy: "basic_analysis_mode"
        timeout: "unlimited"
    retry_policies:
      search_operations: 3
      analysis_operations: 2
      pattern_recognition: 1

# Tool Preferences (MCP-Enhanced)
tool_preferences:
  primary_tools:
    - name: "Read"
      mcp_server: "filesystem_analyzer"
      cache_policy: "hierarchical"
      batch_capable: true
      metadata_extraction: true
    - name: "Grep"
      mcp_server: "search_optimized"
      pattern_caching: true
      parallel_search: true
      context_preservation: true
    - name: "Glob"
      mcp_server: "pattern_matcher"
      recursive_optimization: true
      result_caching: true
    - name: "LS"
      mcp_server: "filesystem_analyzer" 
      directory_structure_caching: true
      metadata_collection: true

  specialized_tools:
    - name: "DependencyAnalyzer"
      mcp_server: "dependency_mapper"
      graph_building: true
      circular_dependency_detection: true
    - name: "ComplexityCalculator"
      mcp_server: "complexity_analyzer"
      multiple_metrics: true
      trend_tracking: true
    - name: "PatternRecognizer"
      mcp_server: "ml_analyzer"
      machine_learning: true
      custom_pattern_training: true
    - name: "TechnicalDebtAnalyzer"
      mcp_server: "debt_calculator"
      scoring_algorithms: true
      remediation_suggestions: true

# Analysis-Specific Optimizations
analysis_optimizations:
  codebase_analysis:
    tool_priority: ["structure_analyzer", "dependency_mapper", "pattern_recognizer"]
    analysis_depth: ["surface", "structural", "semantic", "behavioral"]
    caching_strategy: "multi_level_cache"
    
  dependency_analysis:
    tool_priority: ["import_scanner", "call_graph_builder", "dependency_resolver"]
    optimization_focus: ["circular_dependencies", "coupling_analysis", "modularity_assessment"]
    graph_algorithms: ["strongly_connected_components", "topological_sort", "centrality_measures"]
    
  pattern_recognition:
    tool_priority: ["design_pattern_detector", "antipattern_identifier", "architectural_pattern_analyzer"]
    ml_models: ["code_similarity", "pattern_classification", "anomaly_detection"]
    learning_datasets: ["known_patterns", "project_specific", "domain_specific"]

  technical_debt_assessment:
    tool_priority: ["code_quality_analyzer", "maintainability_calculator", "refactoring_opportunity_detector"]
    debt_categories: ["design_debt", "documentation_debt", "test_debt", "performance_debt"]
    prioritization_algorithms: ["impact_effort_matrix", "business_value_scoring", "risk_assessment"]

# Workflow Patterns (MCP-Enhanced)
workflow_patterns:
  comprehensive_analysis:
    steps:
      - tool: "LS"
        action: "map_directory_structure"
        mcp_optimization: "structure_caching"
      - tool: "DependencyAnalyzer"
        action: "build_dependency_graph"
        mcp_optimization: "graph_caching"
      - tool: "PatternRecognizer"
        action: "identify_patterns"
        mcp_optimization: "pattern_learning"
      - tool: "TechnicalDebtAnalyzer"
        action: "assess_technical_debt"
        mcp_optimization: "scoring_cache"
      - tool: "ReportGenerator"
        action: "generate_analysis_report"
        mcp_optimization: "template_optimization"

  incremental_analysis:
    steps:
      - tool: "ChangeDetector"
        action: "identify_modified_files"
        mcp_optimization: "change_tracking"
      - tool: "ImpactAnalyzer"
        action: "calculate_change_impact"
        mcp_optimization: "impact_caching"
      - tool: "DependencyUpdater"
        action: "update_dependency_graph"
        mcp_optimization: "incremental_updates"
      - tool: "DeltaReporter"
        action: "generate_change_report"
        mcp_optimization: "delta_reporting"

  cross_repository_analysis:
    steps:
      - tool: "RepositoryScanner"
        action: "discover_related_repositories"
        mcp_optimization: "repository_indexing"
      - tool: "InterfaceAnalyzer"
        action: "analyze_integration_points"
        mcp_optimization: "interface_caching"
      - tool: "ConsistencyChecker"
        action: "validate_cross_repo_consistency"
        mcp_optimization: "consistency_tracking"

# Quality Assurance Integration
quality_assurance:
  analysis_validation:
    automated_checks: true
    result_verification: true
    consistency_validation: true
    mcp_integration: "validation_workflow_optimizer"
  
  accuracy_assurance:
    cross_validation: "required"
    statistical_sampling: "confidence_intervals"
    bias_detection: "systematic_checking"
    mcp_integration: "accuracy_monitoring"

# Monitoring and Observability
monitoring:
  analysis_metrics:
    - analysis_completion_time
    - pattern_recognition_accuracy
    - cache_hit_rates
    - dependency_graph_build_time
  
  mcp_metrics:
    - server_response_times
    - fallback_activations
    - optimization_effectiveness
    - resource_utilization
    - cache_efficiency

# Backward Compatibility
backward_compatibility:
  non_mcp_fallback: true
  standard_tool_support: true
  graceful_degradation: true
  compatibility_mode: "full_feature_parity"

# Security Configuration
security:
  tool_execution: "sandboxed"
  data_handling: "encrypted_at_rest"
  access_controls: "read_only_analysis"
  audit_logging: "comprehensive"
  mcp_security: "end_to_end_encryption"

# Agent Personality Preservation
personality:
  approach: "systematic_comprehensive_analysis"
  communication_style: "data_driven_insights"
  decision_making: "evidence_based_conclusions"
  expertise_demonstration: "thorough_technical_documentation"
  
  core_traits:
    - "Provides comprehensive, data-driven codebase insights"
    - "Identifies hidden patterns and architectural issues"
    - "Delivers actionable technical debt assessments"
    - "Maintains objective, metrics-based analysis"
    - "Focuses on scalability and maintainability implications"

# Success Metrics
success_metrics:
  performance_targets:
    analysis_speed_improvement: "40-60%"
    pattern_recognition_accuracy: "95%+"
    cache_hit_rate: "85%+"
    large_codebase_processing: "50% faster"
  
  quality_targets:
    analysis_completeness: "98%+"
    technical_debt_accuracy: "90%+"
    dependency_mapping_coverage: "100%"
    actionable_insights_ratio: "80%+"