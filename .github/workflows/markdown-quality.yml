name: Markdown Quality Gate

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**/*.md'
      - '.markdownlint-cli2.jsonc'
      - 'scripts/validate-markdown-quality.sh'
  pull_request:
    branches: [ main ]
    paths:
      - '**/*.md'
      - '.markdownlint-cli2.jsonc'
      - 'scripts/validate-markdown-quality.sh'

jobs:
  markdown-quality:
    runs-on: ubuntu-latest
    name: Markdown Quality Validation
    permissions:
      contents: read
      pull-requests: write
      statuses: write
      issues: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v6
      with:
        node-version: '20'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'

    - name: Configure npm for retry handling
      run: |
        npm config set registry https://registry.npmjs.org/
        npm config set fetch-retry-mintimeout 20000
        npm config set fetch-retry-maxtimeout 120000
        npm config set fetch-retry-factor 2
        npm config set fetch-retries 5
        npm config set fetch-timeout 300000

    - name: Install dependencies with retry logic
      run: |
        for attempt in {1..5}; do
          echo "Attempt $attempt to install dependencies..."
          if npm ci --prefer-offline --no-audit --progress=false; then
            echo "Dependencies installed successfully on attempt $attempt"
            break
          elif [ $attempt -eq 5 ]; then
            echo "All attempts failed. Exiting with error."
            exit 1
          else
            echo "Attempt $attempt failed. Retrying in $((attempt * 10)) seconds..."
            sleep $((attempt * 10))
          fi
        done

    # Baseline is now tracked in git, no need to cache
    # The file tests/markdown/.baseline_violations is committed

    - name: Make scripts executable
      run: |
        chmod +x scripts/validate-markdown-quality.sh
        chmod +x tests/markdown/test_markdown_quality.sh

    - name: Run markdown quality validation
      run: |
        echo "::group::Markdown Quality Gate"
        ./scripts/validate-markdown-quality.sh validate
        echo "::endgroup::"

    - name: Run markdown quality tests
      run: |
        echo "::group::Markdown Quality Tests"
        ./tests/markdown/test_markdown_quality.sh
        echo "::endgroup::"

    - name: Generate quality report
      if: always()
      run: |
        ./scripts/validate-markdown-quality.sh report

    - name: Upload quality report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: markdown-quality-report
        path: .tmp/docs/markdown-quality-report.md
        retention-days: 30

    - name: Comment on PR with quality report
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v8
      with:
        script: |
          const fs = require('fs');
          const path = '.tmp/docs/markdown-quality-report.md';

          if (fs.existsSync(path)) {
            const report = fs.readFileSync(path, 'utf8');
            const body = `## 📝 Markdown Quality Report\n\n${report}`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          }

    - name: Set status check
      if: always()
      uses: actions/github-script@v8
      with:
        script: |
          const conclusion = '${{ job.status }}' === 'success' ? 'success' : 'failure';

          github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: conclusion,
            target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
            description: conclusion === 'success' ? 'All markdown quality checks passed' : 'Markdown quality checks failed',
            context: 'Markdown Quality Gate'
          });

  quality-metrics:
    runs-on: ubuntu-latest
    name: Quality Metrics Collection
    needs: markdown-quality
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js with enhanced caching
      uses: actions/setup-node@v6
      with:
        node-version: '20'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'

    - name: Configure npm for robust retry handling
      run: |
        npm config set registry https://registry.npmjs.org/
        npm config set fetch-retry-mintimeout 30000
        npm config set fetch-retry-maxtimeout 180000
        npm config set fetch-retry-factor 3
        npm config set fetch-retries 8
        npm config set fetch-timeout 600000
        npm config set audit false
        npm config set progress false
        npm config set prefer-offline true

    - name: Install dependencies with exponential backoff retry
      run: |
        max_attempts=8
        base_delay=5

        for attempt in $(seq 1 $max_attempts); do
          echo "🔄 Attempt $attempt/$max_attempts to install dependencies..."

          # Calculate exponential backoff delay
          if [ $attempt -gt 1 ]; then
            delay=$((base_delay * (2 ** (attempt - 2))))
            echo "⏳ Waiting ${delay}s before retry (exponential backoff)..."
            sleep $delay
          fi

          # Try multiple npm install strategies
          if npm ci --prefer-offline --no-audit --progress=false --fetch-timeout=600000; then
            echo "✅ Dependencies installed successfully on attempt $attempt"
            break
          elif [ $attempt -eq $max_attempts ]; then
            echo "❌ All $max_attempts attempts failed."
            echo "🔍 Attempting fallback with npm install..."
            if npm install --prefer-offline --no-audit --progress=false --fetch-timeout=600000; then
              echo "✅ Fallback npm install succeeded"
              break
            else
              echo "❌ Fallback also failed. Exiting with error."
              exit 1
            fi
          else
            echo "⚠️ Attempt $attempt failed. Will retry with exponential backoff..."
          fi
        done

    - name: Collect quality metrics with error handling
      run: |
        echo "::group::Quality Metrics Collection"

        # Count total markdown files
        total_files=$(find . -name "*.md" -type f ! -path "./node_modules/*" ! -path "./.git/*" ! -path "./system-configs/.claude/agents/*.md" | wc -l)

        # Count violations - use exact same pattern as local scripts with error handling
        if violations=$(timeout 120 npx markdownlint-cli2 "**/*.md" --config .markdownlint-cli2.jsonc 2>&1 | grep -E "^.+:[0-9]+(:([0-9]+))?[[:space:]]+" | wc -l | tr -d ' '); then
          echo "✅ Successfully collected markdown violations: $violations"
        else
          echo "⚠️ Failed to run markdownlint, defaulting to 0 violations"
          violations=0
        fi

        # Calculate quality score
        if [[ $total_files -gt 0 ]]; then
          quality_score=$(( (total_files * 100 - violations * 100) / total_files ))
        else
          quality_score=100
        fi

        # Ensure quality_score is between 0 and 100
        if [[ $quality_score -lt 0 ]]; then
          quality_score=0
        elif [[ $quality_score -gt 100 ]]; then
          quality_score=100
        fi

        echo "::notice title=Quality Metrics::Files: $total_files, Violations: $violations, Quality Score: $quality_score%"

        # Set outputs for potential badge generation
        echo "total_files=$total_files" >> $GITHUB_OUTPUT
        echo "violations=$violations" >> $GITHUB_OUTPUT
        echo "quality_score=$quality_score" >> $GITHUB_OUTPUT

        echo "::endgroup::"

    - name: Update quality badge
      if: github.ref == 'refs/heads/main'
      run: |
        # This could integrate with shields.io or similar badge service
        echo "Quality score: ${{ steps.collect-metrics.outputs.quality_score }}%"
