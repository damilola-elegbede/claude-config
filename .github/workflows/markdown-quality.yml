name: Markdown Quality Gate

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**/*.md'
      - '.markdownlint-cli2.jsonc'
      - 'scripts/validate-markdown-quality.sh'
  pull_request:
    branches: [ main ]
    paths:
      - '**/*.md'
      - '.markdownlint-cli2.jsonc'
      - 'scripts/validate-markdown-quality.sh'

jobs:
  markdown-quality:
    runs-on: ubuntu-latest
    name: Markdown Quality Validation
    permissions:
      contents: read
      pull-requests: write
      statuses: write
      issues: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Cache quality baseline
      uses: actions/cache@v4
      with:
        path: tests/markdown/.baseline_violations
        key: markdown-quality-baseline-${{ hashFiles('**/*.md') }}
        restore-keys: |
          markdown-quality-baseline-

    - name: Make scripts executable
      run: |
        chmod +x scripts/validate-markdown-quality.sh
        chmod +x tests/markdown/test_markdown_quality.sh

    - name: Run markdown quality validation
      run: |
        echo "::group::Markdown Quality Gate"
        ./scripts/validate-markdown-quality.sh validate
        echo "::endgroup::"

    - name: Run markdown quality tests
      run: |
        echo "::group::Markdown Quality Tests"
        ./tests/markdown/test_markdown_quality.sh
        echo "::endgroup::"

    - name: Generate quality report
      if: always()
      run: |
        ./scripts/validate-markdown-quality.sh report

    - name: Upload quality report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: markdown-quality-report
        path: docs/markdown-quality-report.md
        retention-days: 30

    - name: Comment on PR with quality report
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = 'docs/markdown-quality-report.md';

          if (fs.existsSync(path)) {
            const report = fs.readFileSync(path, 'utf8');
            const body = `## 📝 Markdown Quality Report\n\n${report}`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          }

    - name: Set status check
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const conclusion = '${{ job.status }}' === 'success' ? 'success' : 'failure';

          github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: conclusion,
            target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
            description: conclusion === 'success' ? 'All markdown quality checks passed' : 'Markdown quality checks failed',
            context: 'Markdown Quality Gate'
          });

  quality-metrics:
    runs-on: ubuntu-latest
    name: Quality Metrics Collection
    needs: markdown-quality
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm ci

    - name: Collect quality metrics
      run: |
        echo "::group::Quality Metrics Collection"

        # Count total markdown files
        total_files=$(find . -name "*.md" -type f ! -path "./node_modules/*" ! -path "./.git/*" ! -path "./system-configs/.claude/agents/*.md" | wc -l)

        # Count violations - use exact same pattern as local scripts
        violations=$(npx markdownlint-cli2 "**/*.md" --config .markdownlint-cli2.jsonc 2>&1 | grep -E "^.+:[0-9]+(:([0-9]+))?[[:space:]]+" | wc -l | tr -d ' ')

        # Calculate quality score
        if [[ $total_files -gt 0 ]]; then
          quality_score=$(( (total_files * 100 - violations * 100) / total_files ))
        else
          quality_score=100
        fi

        echo "::notice title=Quality Metrics::Files: $total_files, Violations: $violations, Quality Score: $quality_score%"

        # Set outputs for potential badge generation
        echo "total_files=$total_files" >> $GITHUB_OUTPUT
        echo "violations=$violations" >> $GITHUB_OUTPUT
        echo "quality_score=$quality_score" >> $GITHUB_OUTPUT

        echo "::endgroup::"

    - name: Update quality badge
      if: github.ref == 'refs/heads/main'
      run: |
        # This could integrate with shields.io or similar badge service
        echo "Quality score: ${{ steps.collect-metrics.outputs.quality_score }}%"