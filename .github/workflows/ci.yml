name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Increased timeout for comprehensive tests

    env:
      CI: true
      NO_COLOR: 1
      TERM: dumb
      TMPDIR: /tmp/ci-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 1  # Shallow clone for faster checkout

    - name: Setup Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.13.5'
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential python3-dev
      timeout-minutes: 3

    - name: Install Python dependencies with version pinning
      run: |
        python -m pip install --upgrade 'pip>=24.0'

        # Install core dependencies
        if [ -f "requirements.txt" ]; then
          echo "Installing core dependencies from requirements.txt..."
          pip install -r requirements.txt
        else
          # Fallback to direct install if requirements.txt doesn't exist
          pip install PyYAML==6.0.2
        fi

        # Install performance script dependencies if needed
        if [ -f "scripts/performance/requirements.txt" ]; then
          echo "Installing performance dependencies..."
          pip install -r scripts/performance/requirements.txt
        fi
      timeout-minutes: 3

    - name: Verify Python environment
      run: |
        echo "Python environment verification:"
        python --version
        python -c "import yaml; print(f'PyYAML version: {yaml.__version__}')"
        echo "✓ Python environment ready"

    - name: Setup Node.js (for markdownlint only)
      uses: actions/setup-node@v6
      with:
        node-version: '20.18.0'  # Pin to specific LTS version
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'

    - name: Configure npm for resilience
      run: |
        npm config set registry https://registry.npmjs.org/
        npm config set fetch-retry-mintimeout 20000
        npm config set fetch-retry-maxtimeout 120000
        npm config set fetch-retry-factor 2
        npm config set fetch-retries 5
        npm config set fetch-timeout 300000
      timeout-minutes: 1

    - name: Install Node.js dependencies with retry logic
      run: |
        for attempt in {1..3}; do
          echo "Attempt $attempt to install dependencies..."
          if [ -f package.json ] && npm ci --prefer-offline --no-audit --progress=false; then
            echo "✓ Dependencies installed successfully on attempt $attempt"
            break
          elif [ $attempt -eq 3 ]; then
            echo "❌ All attempts failed. Exiting with error."
            exit 1
          else
            echo "Attempt $attempt failed. Retrying in $((attempt * 5)) seconds..."
            sleep $((attempt * 5))
          fi
        done
      timeout-minutes: 8

    - name: Comprehensive dependency verification
      run: |
        chmod +x .github/scripts/verify-dependencies.sh
        ./.github/scripts/verify-dependencies.sh
      timeout-minutes: 2

    - name: Create CI temp directory
      run: |
        mkdir -p "$TMPDIR"
        chmod 755 "$TMPDIR"
      timeout-minutes: 1

    - name: Make test script executable and fix permissions
      run: |
        chmod +x tests/test.sh
        # Fix permissions for all scripts that might be executed
        find scripts/ -name "*.sh" -type f -exec chmod +x {} \; || true
        find scripts/ -name "*.py" -type f -exec chmod +x {} \; || true
      timeout-minutes: 1

    - name: Optimize system resources
      run: |
        # Increase resource limits for Ubuntu 24.04.3 LTS
        echo "Optimizing system resources..."
        sudo sysctl -w fs.file-max=65536 || true
        ulimit -n 2048 || true

        # Clean up space
        sudo apt-get clean || true
        docker system prune -f || true

        # Monitor initial state
        echo "Initial resource state:"
        free -h | head -2
        df -h /tmp
      timeout-minutes: 2

    - name: Run test suite with optimization
      run: |
        echo "=== CI Environment Info ==="
        echo "Runner OS: $RUNNER_OS"
        echo "Home: $HOME"
        echo "Temp: $TMPDIR"
        echo "Python: $(python --version)"
        echo "Bash: $(bash --version | head -1)"
        echo "Working Directory: $(pwd)"
        echo "=========================="

        # Run tests with output limiting to prevent truncation
        ./tests/test.sh 2>&1 | tee test-results.log

        echo "=== Test Completion ==="
        echo "Final resource state:"
        free -h | head -2
        df -h /tmp
      timeout-minutes: 12

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v5
      with:
        name: test-results
        path: |
          test-results.log
          tests/**/*.log
          /tmp/verify-test-results-*/
        retention-days: 30

  validate-structure:
    name: Validate Repository Structure
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Check required files exist
      run: |
        echo "Checking required files..."
        required_files=(
          "README.md"
          "system-configs/CLAUDE.md"
          "LICENSE"
          "tests/test.sh"
          "system-configs/.claude/commands/plan.md"
          "system-configs/.claude/commands/commit.md"
          "system-configs/.claude/commands/push.md"
          "system-configs/.claude/commands/test.md"
          "system-configs/.claude/commands/prime.md"
          "system-configs/.claude/commands/sync.md"
          "system-configs/.claude/commands/verify.md"
        )

        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ Missing required file: $file"
            exit 1
          else
            echo "✓ Found: $file"
          fi
        done

        echo "All required files present!"

    - name: Check file permissions
      run: |
        if [ ! -x "tests/test.sh" ]; then
          echo "❌ tests/test.sh is not executable"
          exit 1
        fi
        echo "✓ tests/test.sh is executable"

  lint-markdown:
    name: Lint Markdown Files
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v6
      with:
        node-version: '20.18.0'
        cache: 'npm'

    - name: Configure npm for resilience
      run: |
        npm config set registry https://registry.npmjs.org/
        npm config set fetch-retry-mintimeout 20000
        npm config set fetch-retry-maxtimeout 120000
        npm config set fetch-retry-factor 2
        npm config set fetch-retries 5
        npm config set fetch-timeout 300000

    - name: Install markdownlint with retry logic
      run: |
        for attempt in {1..3}; do
          echo "Attempt $attempt to install markdownlint..."
          if [ -f package.json ] && npm ci --prefer-offline --no-audit --progress=false; then
            echo "✓ Markdownlint installed successfully on attempt $attempt"
            break
          elif [ $attempt -eq 3 ]; then
            echo "❌ All attempts failed. Exiting with error."
            exit 1
          else
            echo "Attempt $attempt failed. Retrying in $((attempt * 5)) seconds..."
            sleep $((attempt * 5))
          fi
        done
      timeout-minutes: 8

    - name: Lint markdown files
      uses: DavidAnson/markdownlint-cli2-action@v20
      continue-on-error: true
      with:
        config: '.markdownlint-cli2.jsonc'
        globs: '**/*.md'

  shellcheck-validation:
    name: Shell Script Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install ShellCheck
      run: |
        sudo apt-get update
        sudo apt-get install -y shellcheck

    - name: Run ShellCheck on critical scripts
      run: |
        echo "Running ShellCheck on critical scripts..."

        # Critical scripts that must pass
        critical_scripts=(
          "tests/test.sh"
          "scripts/setup-shellcheck.sh"
          "scripts/validate-system.sh"
          "scripts/validate_yaml.sh"
        )

        exit_code=0

        for script in "${critical_scripts[@]}"; do
          if [ -f "$script" ]; then
            echo "Checking: $script"
            if shellcheck --severity=warning \
              --exclude=SC1091,SC2034,SC2155,SC2250,SC2292,SC2310 \
              "$script"; then
              echo "✅ PASSED: $script"
            else
              echo "❌ FAILED: $script"
              exit_code=1
            fi
          else
            echo "⚠️ Script not found: $script"
          fi
        done

        if [ $exit_code -ne 0 ]; then
          echo "❌ Critical scripts validation failed!"
          exit 1
        else
          echo "✅ All critical scripts passed validation!"
        fi
