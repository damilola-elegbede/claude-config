name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'

    - name: Configure npm for retry handling
      run: |
        npm config set registry https://registry.npmjs.org/
        npm config set fetch-retry-mintimeout 20000
        npm config set fetch-retry-maxtimeout 120000
        npm config set fetch-retry-factor 2
        npm config set fetch-retries 5
        npm config set fetch-timeout 300000

    - name: Install dependencies with retry logic
      run: |
        for attempt in {1..5}; do
          echo "Attempt $attempt to install dependencies..."
          if npm ci --prefer-offline --no-audit --progress=false; then
            echo "Dependencies installed successfully on attempt $attempt"
            break
          elif [ $attempt -eq 5 ]; then
            echo "All attempts failed. Exiting with error."
            exit 1
          else
            echo "Attempt $attempt failed. Retrying in $((attempt * 10)) seconds..."
            sleep $((attempt * 10))
          fi
        done

    - name: Make test script executable
      run: chmod +x tests/test.sh

    - name: Run test suite
      run: ./tests/test.sh

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          test-results.log
          tests/**/*.log
        retention-days: 30

  validate-structure:
    name: Validate Repository Structure
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Check required files exist
      run: |
        echo "Checking required files..."
        required_files=(
          "README.md"
          "CLAUDE.md"
          "LICENSE"
          "tests/test.sh"
          "system-configs/.claude/commands/plan.md"
          "system-configs/.claude/commands/commit.md"
          "system-configs/.claude/commands/push.md"
          "system-configs/.claude/commands/test.md"
          "system-configs/.claude/commands/prime.md"
          "system-configs/.claude/commands/sync.md"
        )

        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ Missing required file: $file"
            exit 1
          else
            echo "✓ Found: $file"
          fi
        done

        echo "All required files present!"

    - name: Check file permissions
      run: |
        if [ ! -x "tests/test.sh" ]; then
          echo "❌ tests/test.sh is not executable"
          exit 1
        fi
        echo "✓ tests/test.sh is executable"

  lint-markdown:
    name: Lint Markdown Files
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Lint markdown files
      uses: DavidAnson/markdownlint-cli2-action@v20
      with:
        config: '.markdownlint-cli2.jsonc'
        globs: '**/*.md'

  shellcheck-validation:
    name: Shell Script Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install ShellCheck
      run: |
        sudo apt-get update
        sudo apt-get install -y shellcheck

    - name: Run ShellCheck on critical scripts
      run: |
        echo "Running ShellCheck on critical scripts..."

        # Critical scripts that must pass
        critical_scripts=(
          "tests/test.sh"
          "scripts/setup-shellcheck.sh"
          "scripts/validate-system.sh"
          "scripts/validate_yaml.sh"
        )

        exit_code=0

        for script in "${critical_scripts[@]}"; do
          if [ -f "$script" ]; then
            echo "Checking: $script"
            if shellcheck --severity=warning --exclude=SC1091,SC2034,SC2155,SC2250,SC2292,SC2310 "$script"; then
              echo "✅ PASSED: $script"
            else
              echo "❌ FAILED: $script"
              exit_code=1
            fi
          else
            echo "⚠️ Script not found: $script"
          fi
        done

        if [ $exit_code -ne 0 ]; then
          echo "❌ Critical scripts validation failed!"
          exit 1
        else
          echo "✅ All critical scripts passed validation!"
        fi