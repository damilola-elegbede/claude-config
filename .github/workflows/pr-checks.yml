name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  test-changes:
    name: Test Changes
    runs-on: ubuntu-latest

    steps:
    - name: Checkout PR branch
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyYAML

    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '20'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'

    - name: Configure npm for retry handling
      run: |
        npm config set registry https://registry.npmjs.org/
        npm config set fetch-retry-mintimeout 20000
        npm config set fetch-retry-maxtimeout 120000
        npm config set fetch-retry-factor 2
        npm config set fetch-retries 5
        npm config set fetch-timeout 300000

    - name: Install dependencies with retry logic
      run: |
        for attempt in {1..5}; do
          echo "Attempt $attempt to install dependencies..."
          if npm ci --prefer-offline --no-audit --progress=false; then
            echo "Dependencies installed successfully on attempt $attempt"
            break
          elif [ $attempt -eq 5 ]; then
            echo "All attempts failed. Exiting with error."
            exit 1
          else
            echo "Attempt $attempt failed. Retrying in $((attempt * 10)) seconds..."
            sleep $((attempt * 10))
          fi
        done

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v47

    - name: List changed files
      run: |
        echo "Changed files:"
        for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
          echo "  - $file"
        done

    - name: Run tests
      run: |
        chmod +x tests/test.sh
        ./tests/test.sh

    - name: Check if sync needed
      if: contains(steps.changed-files.outputs.all_changed_files, 'system-configs/CLAUDE.md') || contains(steps.changed-files.outputs.all_changed_files, 'system-configs/.claude/commands/')
      run: |
        echo "⚠️ Changes detected in configuration files!"
        echo "Remember to run /sync command after merging to update your local configuration."

  command-validation:
    name: Validate Commands
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Validate command structure
      run: |
        echo "Validating command files..."

        for cmd in system-configs/.claude/commands/*.md; do
          # Skip README.md file
          if [[ "$(basename "$cmd")" == "README.md" ]]; then
            echo "Skipping $cmd (documentation file)"
            continue
          fi

          echo "Checking $cmd..."

          # Check for required sections in the new template structure
          if ! grep -q "^# /" "$cmd"; then
            echo "❌ Missing command header starting with '# /' in $cmd"
            exit 1
          fi

          if ! grep -q "^## Usage" "$cmd"; then
            echo "❌ Missing Usage section in $cmd"
            exit 1
          fi

          if ! grep -q "^## Description" "$cmd"; then
            echo "❌ Missing Description section in $cmd"
            exit 1
          fi

          if ! grep -q "^## Expected Output" "$cmd"; then
            echo "❌ Missing Expected Output section in $cmd"
            exit 1
          fi

          # Note: Behavior section is now optional in the new template

          echo "✓ $cmd structure is valid"
        done

        echo "All command files are properly structured!"

  security-check:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Check for sensitive data
      run: |
        echo "Scanning for sensitive data..."

        # Check for common patterns of sensitive data
        patterns=(
          "password.*=.*['\"].*['\"]"
          "api[_-]?key.*=.*['\"].*['\"]"
          "secret.*=.*['\"].*['\"]"
          "token.*=.*['\"].*['\"]"
          "private[_-]?key"
        )

        found_issues=false

        for pattern in "${patterns[@]}"; do
          # Exclude .git, node_modules, .github, scripts, and test directories
          # Also exclude example/sample/test/fake/dummy patterns and command documentation
          if grep -r -i -E "$pattern" . \
            --exclude-dir=.git \
            --exclude-dir=node_modules \
            --exclude-dir=.github \
            --exclude-dir=scripts \
            --exclude-dir=tests \
            --exclude="*.md" \
            --exclude="setup-hooks.sh" | \
            grep -v -E "example|sample|test|fake|dummy|mock|pattern|demonstration"; then
            echo "❌ Found potential sensitive data matching pattern: $pattern"
            found_issues=true
          fi
        done

        if [ "$found_issues" = true ]; then
          echo "Security check failed! Please remove sensitive data."
          exit 1
        fi

        echo "✓ No sensitive data patterns found"
