[
  {
    "name": "accessibility-auditor",
    "file": "accessibility-auditor.md",
    "capabilities": [],
    "tools": [],
    "coordination_patterns": [
      "test-engineer",
      "code-reviewer",
      "Specialized best practices and patterns",
      "scenario: \"Typical accessibility auditor task\"",
      "Assign you specific work based on your expertise",
      "Handle any necessary coordination or handoffs",
      "Determine when and how your outputs are used",
      "Focus exclusively on your specialized domain of accessibility auditing",
      "Provide clear, structured outputs for your specific tasks",
      "Complete your assigned work independently",
      "Return comprehensive results to Claude"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "MUST BE USED for WCAG compliance audits and accessibility violations remediation. Use PROACTIVELY for inclusive design validation, screen reader testing, keyboard navigation, and color contrast issues",
    "color": "white"
  },
  {
    "name": "api-architect",
    "file": "api-architect.md",
    "capabilities": [
      "Design REST and GraphQL APIs following industry best practices and organizational standards",
      "Create comprehensive OpenAPI 3.0 specifications with detailed schemas and examples",
      "Implement API design patterns that promote consistency, usability, and maintainability",
      "Design API authentication and authorization patterns including OAuth 2.0, JWT, and API keys",
      "Establish API versioning strategies that enable backward compatibility and smooth migrations",
      "Implement production-ready API endpoints using modern frameworks and best practices",
      "Build REST APIs with proper HTTP method usage, status codes, and resource modeling",
      "Develop GraphQL schemas, resolvers, and subscription implementations",
      "Create API middleware for authentication, rate limiting, logging, and error handling",
      "Implement API testing strategies including unit tests, integration tests, and contract testing",
      "Establish organization-wide API design guidelines and governance policies",
      "Create API review processes and quality gates for new API development",
      "Implement API lifecycle management from design through deprecation",
      "Design API testing strategies including contract testing, integration testing, and load testing",
      "Establish API monitoring and analytics for usage patterns and performance optimization",
      "Generate multi-language SDKs from OpenAPI specifications",
      "Create comprehensive API documentation with examples, tutorials, and best practices",
      "Design API developer portals with interactive documentation and testing capabilities",
      "Implement API onboarding processes and developer support resources",
      "Create API discovery and catalog management for large-scale API ecosystems",
      "Implement API contract testing to ensure frontend-backend compatibility",
      "Design API gateway configurations for routing, rate limiting, and transformation",
      "Establish API mocking and testing environments for development and testing",
      "Create API schema validation and compatibility checking automation",
      "Implement API federation strategies for microservices architectures"
    ],
    "tools": [],
    "coordination_patterns": [
      "test-engineer",
      "code-reviewer",
      "Architecture best practices and patterns",
      "scenario: \"Typical api architect task\"",
      "Assign you specific work based on your expertise",
      "Determine when and how your outputs are used",
      "Focus exclusively on API architecture and design work",
      "Provide clear, structured outputs",
      "Complete your assigned work independently",
      "Architect complex API ecosystems with intricate service dependencies and integration patterns",
      "Synthesize comprehensive API governance frameworks that balance flexibility with standardization",
      "Design sophisticated versioning strategies that accommodate diverse client requirements",
      "Generate production-ready implementations alongside architectural specifications",
      "Optimize developer experience through intuitive API design and comprehensive documentation strategies",
      "**API Specifications**: Comprehensive OpenAPI/GraphQL schemas and documentation",
      "**API Implementations**: Production-ready code for standard use cases",
      "**Testing Strategies**: Complete API testing plans and test suites",
      "**Deployment Guidelines**: API deployment requirements and configurations",
      "**Requirements Documentation**: Business requirements translated into technical API specifications",
      "**API Documentation**: Create comprehensive, user-friendly API documentation",
      "**Developer Support**: Provide technical support and guidance for API integration",
      "**Training Materials**: Develop API usage tutorials and best practices guides",
      "**Community Feedback**: Collect and incorporate developer feedback into API improvements",
      "**API Evangelism**: Promote API adoption and proper usage patterns",
      "**Design Reviews**: Conduct regular API design reviews and approval processes",
      "**Standards Evolution**: Continuously improve API design standards and guidelines",
      "**Compliance Monitoring**: Monitor API implementations for adherence to standards",
      "**Best Practices**: Share API design knowledge and lessons learned across teams",
      "**Industry Standards**: Stay current with API industry standards and emerging patterns"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "MUST BE USED for comprehensive API architecture, OpenAPI specs, and governance policy implementation. Use PROACTIVELY for API strategy, versioning management, GraphQL federation, and enterprise standardization",
    "color": "purple"
  },
  {
    "name": "backend-engineer",
    "file": "backend-engineer.md",
    "capabilities": [
      "**Distributed Systems**: Consensus algorithms, CAP theorem, distributed transactions, service mesh",
      "**Microservices**: Service boundaries, inter-service communication, API gateways, event-driven architecture",
      "**Performance**: Sub-100ms latency optimization, 100k+ RPS handling, horizontal scaling",
      "**Databases**: SQL/NoSQL optimization, sharding, replication strategies, query optimization",
      "**Message Queues**: Kafka, RabbitMQ, Redis Pub/Sub, event streaming architectures",
      "**Caching**: Multi-tier caching strategies, cache invalidation patterns, distributed caching",
      "**Security**: OAuth2/JWT, API security, encryption at rest/in transit, threat modeling"
    ],
    "tools": [],
    "coordination_patterns": [
      "frontend-engineer",
      "test-engineer",
      "devops",
      "Development best practices and patterns",
      "scenario: \"Typical backend engineer task\""
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "MUST BE USED for server-side architecture, microservices, distributed systems, and database engineering. Use PROACTIVELY for high-performance optimization (>10k RPS), event-driven architecture, and complex backend infrastructure",
    "color": "blue"
  },
  {
    "name": "business-analyst",
    "file": "business-analyst.md",
    "capabilities": [
      "Primary expertise in analysis domain",
      "Collaborative approach with other agents",
      "Focus on quality and best practices"
    ],
    "tools": [],
    "coordination_patterns": [
      "test-engineer",
      "code-reviewer",
      "Analysis best practices and patterns",
      "scenario: \"Typical business analyst task\"",
      "Works well with parallel agents for efficient execution",
      "Clear handoff protocols with downstream agents",
      "Escalates complex decisions appropriately"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [
      "When analysis expertise is required",
      "For tasks requiring business analyst skills"
    ],
    "orchestration_notes": [],
    "description": "Requirements analysis, stakeholder communication, and process mapping expert",
    "color": "purple"
  },
  {
    "name": "cloud-architect",
    "file": "cloud-architect.md",
    "capabilities": [
      "Design scalable, resilient, and cost-effective cloud architectures",
      "Select appropriate cloud services based on requirements and constraints",
      "Create detailed architecture diagrams and documentation",
      "Balance between cloud-native services and portable solutions",
      "Consider multi-cloud and hybrid cloud scenarios",
      "Assess existing applications for cloud readiness",
      "Develop migration strategies using the 6Rs framework",
      "Create migration roadmaps with clear phases and dependencies",
      "Design for minimal downtime and risk mitigation",
      "Plan data migration and synchronization strategies",
      "Analyze cloud spending patterns and identify optimization opportunities",
      "Design architectures with cost efficiency in mind",
      "Implement FinOps practices and cost allocation strategies",
      "Recommend reserved instances, savings plans, and spot usage",
      "Set up cost monitoring and alerting mechanisms",
      "Design secure cloud architectures following zero-trust principles",
      "Implement proper identity and access management (IAM)",
      "Ensure compliance with relevant frameworks and regulations",
      "Design for data protection, encryption, and privacy",
      "Plan for disaster recovery and business continuity",
      "Architect serverless solutions for appropriate use cases",
      "Design container-based architectures with Kubernetes",
      "Implement event-driven and microservices patterns",
      "Leverage managed services to reduce operational overhead",
      "Design for cloud-native observability and monitoring"
    ],
    "tools": [],
    "coordination_patterns": [
      "test-engineer",
      "code-reviewer",
      "Infrastructure best practices and patterns",
      "scenario: \"Typical cloud architect task\"",
      "Architect complex multi-cloud ecosystems with sophisticated service integration and data synchronization patterns",
      "Design comprehensive migration strategies that minimize risk while maximizing business value and operational",
      "Implement advanced cost optimization frameworks using FinOps principles and automated resource management",
      "Create resilient, scalable infrastructure that adapts to changing business requirements and traffic patterns",
      "Balance cloud provider capabilities with vendor lock-in considerations and portability requirements"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "MUST BE USED for comprehensive cloud architecture design, enterprise migration strategies, and multi-cloud implementations. Use PROACTIVELY for AWS/Azure/GCP deployments, IaC development, and cloud-native pattern implementation",
    "color": "yellow"
  },
  {
    "name": "code-reviewer",
    "file": "code-reviewer.md",
    "capabilities": [
      "Run ALL applicable linters for detected languages",
      "JavaScript/TypeScript: ESLint, Prettier",
      "Python: ruff, black, mypy, pylint",
      "Go: golangci-lint, gofmt",
      "Rust: clippy, rustfmt",
      "CSS/SCSS: stylelint",
      "Markdown: markdownlint",
      "YAML/JSON: yamllint, jsonlint",
      "Fail review if ANY linter errors exist",
      "Code quality violations (treat ALL as blocking)",
      "Security vulnerabilities (zero tolerance)",
      "Performance anti-patterns (must fix)",
      "Maintainability issues (blocking)",
      "Missing error handling (critical)",
      "Insufficient test coverage (blocking if <80%)",
      "Code duplication (DRY violations are blocking)",
      "Cyclomatic complexity (block if >10)",
      "Function/file length violations (block if exceeds limits)",
      "Search for `.coderabbit.yml`, `.eslintrc`, `.prettierrc`, etc.",
      "Apply ALL rules as BLOCKING issues",
      "If no config exists, apply STRICTEST industry standards",
      "Check for pre-commit hooks and ensure compliance",
      "**Frontend**: React hooks rules, accessibility violations, bundle size",
      "**Backend**: API versioning, error responses, logging standards",
      "**Mobile**: Memory leaks, battery optimization, offline handling",
      "**Infrastructure**: Security groups, resource tagging, cost optimization",
      "**Databases**: Index usage, query optimization, migration safety"
    ],
    "tools": [],
    "coordination_patterns": [
      "test-engineer",
      "code-reviewer",
      "Quality best practices and patterns",
      "scenario: \"Typical code reviewer task\""
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "MUST BE USED for pre-commit reviews, vulnerability detection, and production readiness assessment. Use PROACTIVELY after code changes for quality review, security checks, best practices validation, and comprehensive code analysis",
    "color": "green"
  },
  {
    "name": "codebase-analyst",
    "file": "codebase-analyst.md",
    "capabilities": [],
    "tools": [],
    "coordination_patterns": [
      "test-engineer",
      "code-reviewer",
      "Analysis best practices and patterns",
      "scenario: \"Typical codebase analyst task\""
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Use PROACTIVELY for comprehensive code architecture analysis and technical debt assessment. MUST BE USED for evaluating codebases, creating executive summaries, and identifying security risks and performance bottlenecks",
    "color": "purple"
  },
  {
    "name": "data-engineer",
    "file": "data-engineer.md",
    "capabilities": [
      "Primary expertise in development domain",
      "Collaborative approach with other agents",
      "Focus on quality and best practices"
    ],
    "tools": [],
    "coordination_patterns": [
      "test-engineer",
      "code-reviewer",
      "Development best practices and patterns",
      "scenario: \"Typical data engineer task\"",
      "Works well with parallel agents for efficient execution",
      "Clear handoff protocols with downstream agents",
      "Escalates complex decisions appropriately"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [
      "When development expertise is required",
      "For tasks requiring data engineer skills"
    ],
    "orchestration_notes": [],
    "description": "Expert data engineer specializing in data pipelines, ETL/ELT systems, and data warehouse architecture",
    "color": "blue"
  },
  {
    "name": "database-admin",
    "file": "database-admin.md",
    "capabilities": [],
    "tools": [],
    "coordination_patterns": [
      "test-engineer",
      "code-reviewer",
      "Specialized best practices and patterns",
      "scenario: \"Typical database admin task\""
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [
      "Database performance issues and slow queries",
      "Schema design and data modeling decisions",
      "Backup and disaster recovery planning",
      "Security hardening and compliance requirements",
      "Replication and high availability setup",
      "Database migrations and upgrades",
      "Capacity planning and scaling strategies",
      "Query optimization and index tuning",
      "Connection pool and resource configuration",
      "Monitoring and alerting setup"
    ],
    "orchestration_notes": [],
    "description": "Use PROACTIVELY for database optimization, security hardening, and performance tuning. MUST BE USED for query optimization, index management, high-availability configuration, and disaster recovery planning",
    "color": "white"
  },
  {
    "name": "debugger",
    "file": "debugger.md",
    "capabilities": [],
    "tools": [],
    "coordination_patterns": [
      "test-engineer",
      "code-reviewer",
      "Quality best practices and patterns",
      "scenario: \"Typical debugger task\""
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "\"MUST BE USED for investigating complex intermittent bugs, race conditions, and production-only failures. Use PROACTIVELY for distributed system failures, timing-dependent bugs, and concurrency issues requiring forensic analysis\"",
    "color": "green"
  },
  {
    "name": "devops",
    "file": "devops.md",
    "capabilities": [],
    "tools": [],
    "coordination_patterns": [
      "test-engineer",
      "code-reviewer",
      "Infrastructure best practices and patterns",
      "scenario: \"Typical devops task\""
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "MUST BE USED for complex CI/CD pipeline orchestration, enterprise Kubernetes clusters, and Infrastructure as Code at scale. Use PROACTIVELY for deployment bottlenecks, reliability issues, and multi-cloud Terraform deployments",
    "color": "yellow"
  },
  {
    "name": "frontend-engineer",
    "file": "frontend-engineer.md",
    "capabilities": [
      "Primary expertise in development domain",
      "Collaborative approach with other agents",
      "Focus on quality and best practices"
    ],
    "tools": [],
    "coordination_patterns": [
      "backend-engineer",
      "ui-designer",
      "test-engineer",
      "Development best practices and patterns",
      "scenario: \"Typical frontend engineer task\"",
      "Works well with parallel agents for efficient execution",
      "Clear handoff protocols with downstream agents",
      "Escalates complex decisions appropriately"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [
      "When development expertise is required",
      "For tasks requiring frontend engineer skills"
    ],
    "orchestration_notes": [],
    "description": "Expert frontend engineer specializing in user interfaces, client-side applications, and performance optimization",
    "color": "blue"
  },
  {
    "name": "fullstack-lead",
    "file": "fullstack-lead.md",
    "capabilities": [
      "Primary expertise in development domain",
      "Collaborative approach with other agents",
      "Focus on quality and best practices"
    ],
    "tools": [],
    "coordination_patterns": [
      "test-engineer",
      "code-reviewer",
      "Development best practices and patterns",
      "scenario: \"Typical fullstack lead task\"",
      "Works well with parallel agents for efficient execution",
      "Clear handoff protocols with downstream agents",
      "Escalates complex decisions appropriately"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [
      "When development expertise is required",
      "For tasks requiring fullstack lead skills"
    ],
    "orchestration_notes": [],
    "description": "Senior full-stack developer handling end-to-end development with auto-escalation for complex requirements",
    "color": "blue"
  },
  {
    "name": "ml-engineer",
    "file": "ml-engineer.md",
    "capabilities": [],
    "tools": [],
    "coordination_patterns": [
      "test-engineer",
      "code-reviewer",
      "Development best practices and patterns",
      "scenario: \"Typical ml engineer task\""
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "MUST BE USED for enterprise ML model deployment and advanced MLOps pipelines. Use PROACTIVELY for complex model serving architectures, feature store design, and distributed training infrastructure",
    "color": "blue"
  },
  {
    "name": "mobile-engineer",
    "file": "mobile-engineer.md",
    "capabilities": [
      "Primary expertise in development domain",
      "Collaborative approach with other agents",
      "Focus on quality and best practices"
    ],
    "tools": [],
    "coordination_patterns": [
      "test-engineer",
      "code-reviewer",
      "Development best practices and patterns",
      "scenario: \"Typical mobile engineer task\"",
      "Works well with parallel agents for efficient execution",
      "Clear handoff protocols with downstream agents",
      "Escalates complex decisions appropriately"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [
      "When development expertise is required",
      "For tasks requiring mobile engineer skills"
    ],
    "orchestration_notes": [],
    "description": "Expert mobile engineer for native and cross-platform mobile application development",
    "color": "blue"
  },
  {
    "name": "mobile-ui",
    "file": "mobile-ui.md",
    "capabilities": [
      "Primary expertise in design domain",
      "Collaborative approach with other agents",
      "Focus on quality and best practices"
    ],
    "tools": [],
    "coordination_patterns": [
      "test-engineer",
      "code-reviewer",
      "Design best practices and patterns",
      "scenario: \"Typical mobile ui task\"",
      "Works well with parallel agents for efficient execution",
      "Clear handoff protocols with downstream agents",
      "Escalates complex decisions appropriately"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [
      "When design expertise is required",
      "For tasks requiring mobile ui skills"
    ],
    "orchestration_notes": [],
    "description": "Mobile UI/UX design specialist for iOS/Android design patterns",
    "color": "pink"
  },
  {
    "name": "performance-engineer",
    "file": "performance-engineer.md",
    "capabilities": [
      "Primary expertise in quality domain",
      "Collaborative approach with other agents",
      "Focus on quality and best practices"
    ],
    "tools": [],
    "coordination_patterns": [
      "test-engineer",
      "code-reviewer",
      "Quality best practices and patterns",
      "scenario: \"Typical performance engineer task\"",
      "Works well with parallel agents for efficient execution",
      "Clear handoff protocols with downstream agents",
      "Escalates complex decisions appropriately"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [
      "When quality expertise is required",
      "For tasks requiring performance engineer skills"
    ],
    "orchestration_notes": [],
    "description": "Performance optimization, load testing, and benchmarking expert",
    "color": "green"
  },
  {
    "name": "platform-engineer",
    "file": "platform-engineer.md",
    "capabilities": [],
    "tools": [],
    "coordination_patterns": [
      "test-engineer",
      "code-reviewer",
      "Infrastructure best practices and patterns",
      "scenario: \"Typical platform engineer task\""
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [
      "Building internal developer platforms and portals",
      "Creating self-service infrastructure capabilities",
      "Standardizing CI/CD pipelines and build processes",
      "Implementing developer productivity tools",
      "Designing platform APIs and abstractions",
      "Setting up service catalogs and documentation systems",
      "Automating compliance and security checks",
      "Building Kubernetes operators and controllers",
      "Improving developer experience and reducing cognitive load",
      "Creating golden path templates for common use cases"
    ],
    "orchestration_notes": [],
    "description": "Use PROACTIVELY for platform engineering and developer experience optimization. MUST BE USED for building comprehensive platforms that empower development teams, implementing developer portals, and standardized workflows",
    "color": "yellow"
  },
  {
    "name": "principal-architect",
    "file": "principal-architect.md",
    "capabilities": [],
    "tools": [],
    "coordination_patterns": [
      "api-architect",
      "cloud-architect",
      "product-strategist",
      "Architecture best practices and patterns",
      "scenario: \"Typical principal architect task\"",
      "Codebase architecture analysis",
      "Technical debt assessment",
      "Technology evaluation and selection",
      "Performance bottleneck identification",
      "Code quality metrics gathering",
      "Technical documentation creation",
      "API documentation and examples",
      "Architecture decision records",
      "User guides and tutorials",
      "UI/UX design and wireframing",
      "**Validation Strategy**: Recommend testing, security, and documentation strategies",
      "Prerequisites and dependencies between recommended tasks",
      "Data/artifact handoff recommendations between phases",
      "Integration point and interface recommendations",
      "Critical path requirement analysis",
      "**Independent Strategy**: Recommend multiple work streams for independent tasks",
      "**Staged Strategy**: Recommend work with planned deliverable exchanges",
      "**Sequential Strategy**: Recommend when work B should wait for Work A completion",
      "**Iterative Strategy**: Recommend work cycles (design \u2192 implement \u2192 test \u2192 document)",
      "**Research Strategy**: Recommend analysis and investigation approaches"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Use PROACTIVELY for system-wide architecture design and comprehensive technical roadmaps. MUST BE USED for complex architectural decisions, enterprise-scale implementation planning, and technical strategy development",
    "color": "purple"
  },
  {
    "name": "product-strategist",
    "file": "product-strategist.md",
    "capabilities": [
      "Primary expertise in documentation domain",
      "Collaborative approach with other agents",
      "Focus on quality and best practices"
    ],
    "tools": [],
    "coordination_patterns": [
      "test-engineer",
      "code-reviewer",
      "Documentation best practices and patterns",
      "scenario: \"Typical product strategist task\"",
      "Works well with parallel agents for efficient execution",
      "Clear handoff protocols with downstream agents",
      "Escalates complex decisions appropriately"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [
      "When documentation expertise is required",
      "For tasks requiring product strategist skills"
    ],
    "orchestration_notes": [],
    "description": "Strategic product guidance and feature prioritization specialist",
    "color": "orange"
  },
  {
    "name": "project-orchestrator",
    "file": "project-orchestrator.md",
    "capabilities": [
      "Analyze project requirements to recommend required agent capabilities",
      "Design parallel execution strategy recommendations to minimize total execution time",
      "Identify dependencies between proposed agent tasks",
      "Recommend execution timelines with clear milestones",
      "Provide resource allocation optimization recommendations",
      "Identify opportunities for parallel execution in planning",
      "Recommend approaches to minimize sequential bottlenecks",
      "Design efficient handoff point recommendations between agents",
      "Create contingency planning recommendations for agent failures",
      "Recommend workload balancing strategies across available agents",
      "Recommend how to break complex projects into agent-appropriate tasks",
      "Define recommended interfaces between agent outputs",
      "Recommend quality checkpoint strategies throughout workflows",
      "Provide integration planning recommendations for agent results",
      "Design rollback strategy recommendations for failed executions"
    ],
    "tools": [],
    "coordination_patterns": [
      "multi_agent_coordination",
      "project_planning",
      "execution_optimization",
      "test-engineer",
      "code-reviewer",
      "Documentation best practices and patterns",
      "scenario: \"Typical project orchestrator task\"",
      "Create contingency planning recommendations for agent failures",
      "Recommend workload balancing strategies across available agents",
      "Recommend how to break complex projects into agent-appropriate tasks",
      "Define recommended interfaces between agent outputs",
      "Recommend quality checkpoint strategies throughout workflows",
      "Provide integration planning recommendations for agent results",
      "Design rollback strategy recommendations for failed executions",
      "test-engineer: [Task description using Phase 1 outputs]",
      "**Ambiguous Tasks**: \u226580% accuracy (with context analysis)",
      "**Technology-Specific**: \u226593% accuracy (using mapping table)",
      "multi_agent_coordination",
      "project_planning",
      "execution_optimization",
      "test-engineer",
      "code-reviewer",
      "Documentation best practices and patterns",
      "scenario: \"Typical project orchestrator task\"",
      "Identify dependencies between proposed agent tasks",
      "Recommend execution timelines with clear milestones",
      "Provide resource allocation optimization recommendations",
      "Identify opportunities for parallel execution in planning",
      "Recommend approaches to minimize sequential bottlenecks",
      "Design efficient handoff point recommendations between agents",
      "Create contingency planning recommendations for agent failures",
      "Recommend workload balancing strategies across available agents",
      "Recommend how to break complex projects into agent-appropriate tasks",
      "Define recommended interfaces between agent outputs",
      "Recommend quality checkpoint strategies throughout workflows",
      "Provide integration planning recommendations for agent results",
      "Design rollback strategy recommendations for failed executions"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Use PROACTIVELY for multi-agent strategy planning. MUST BE USED for parallel execution analysis, resource optimization, workflow coordination, and team efficiency recommendations",
    "color": "orange"
  },
  {
    "name": "researcher",
    "file": "researcher.md",
    "capabilities": [
      "Primary expertise in analysis domain",
      "Collaborative approach with other agents",
      "Focus on quality and best practices"
    ],
    "tools": [],
    "coordination_patterns": [
      "test-engineer",
      "code-reviewer",
      "Analysis best practices and patterns",
      "scenario: \"Typical researcher task\"",
      "Works well with parallel agents for efficient execution",
      "Clear handoff protocols with downstream agents",
      "Escalates complex decisions appropriately"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [
      "When analysis expertise is required",
      "For tasks requiring researcher skills"
    ],
    "orchestration_notes": [],
    "description": "External research, technology evaluation, and industry analysis specialist",
    "color": "purple"
  },
  {
    "name": "security-auditor",
    "file": "security-auditor.md",
    "capabilities": [],
    "tools": [],
    "coordination_patterns": [
      "test-engineer",
      "code-reviewer",
      "Quality best practices and patterns",
      "scenario: \"Typical security auditor task\"",
      "Conduct comprehensive security assessments of code, applications, and infrastructure",
      "Identify vulnerabilities based on OWASP Top 10, CWE/CVE databases, and industry standards",
      "Analyze authentication, authorization, encryption, and data protection mechanisms",
      "Review for injection attacks (SQL, XSS, LDAP, OS command injection)",
      "Assess session management, input validation, and output encoding",
      "Evaluate API security, including rate limiting, authentication, and data exposure",
      "Examine cloud security configurations and infrastructure hardening",
      "Identify insecure dependencies and supply chain vulnerabilities",
      "Clearly explain the security risk and potential impact",
      "Provide the CWE/CVE reference when applicable",
      "Show proof-of-concept exploit scenarios where appropriate",
      "Offer multiple remediation options with pros/cons",
      "Include secure coding examples and best practices",
      "Consider both immediate fixes and long-term security improvements",
      "**Authentication/Authorization**: Multi-factor authentication, session management, privilege escalation",
      "**Data Protection**: Encryption at rest/transit, PII handling, data leakage",
      "**Input Validation**: Sanitization, parameterized queries, file upload security",
      "**API Security**: Rate limiting, CORS, authentication, data exposure",
      "**Infrastructure**: Container security, cloud misconfigurations, network segmentation",
      "**Dependencies**: Known vulnerabilities in third-party libraries and frameworks"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "MUST BE USED for OWASP Top 10 checks, threat modeling, and vulnerability detection. Use PROACTIVELY for security audits, vulnerability assessments, compliance reviews, and threat detection",
    "color": "green"
  },
  {
    "name": "tech-writer",
    "file": "tech-writer.md",
    "capabilities": [],
    "tools": [],
    "coordination_patterns": [
      "test-engineer",
      "code-reviewer",
      "Documentation best practices and patterns",
      "scenario: \"Typical tech writer task\""
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Use PROACTIVELY for documentation, READMEs, API docs, and work summaries. MUST BE USED after",
    "color": "orange"
  },
  {
    "name": "test-engineer",
    "file": "test-engineer.md",
    "capabilities": [],
    "tools": [],
    "coordination_patterns": [
      "code-reviewer",
      "security-auditor",
      "performance-engineer",
      "Quality best practices and patterns",
      "scenario: \"Typical test engineer task\"",
      "Continuous performance improvement with automated bottleneck detection and resolution"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "MUST BE USED for comprehensive test strategy design and intelligent test implementation across frameworks. Use PROACTIVELY for untested code paths, CI/CD pipeline changes, and quality gate failures",
    "color": "green"
  },
  {
    "name": "ui-designer",
    "file": "ui-designer.md",
    "capabilities": [],
    "tools": [],
    "coordination_patterns": [
      "test-engineer",
      "code-reviewer",
      "Design best practices and patterns",
      "scenario: \"Typical ui designer task\""
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "MUST BE USED for comprehensive UI/UX design optimization and advanced design system architecture. Use PROACTIVELY for design inconsistencies, accessibility violations, and user experience friction points",
    "color": "pink"
  }
]
