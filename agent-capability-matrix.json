[
  {
    "name": "accessibility-auditor",
    "file": "accessibility-auditor.md",
    "capabilities": [],
    "tools": [
      "Read",
      "Write",
      "Grep",
      "Glob",
      "LS",
      "TodoWrite"
    ],
    "coordination_patterns": [],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Use for WCAG compliance audits, screen reader testing, keyboard navigation checks, and accessibility remediation. MUST BE USED when implementing accessible UI components or fixing accessibility violations",
    "color": "green"
  },
  {
    "name": "agent-architect",
    "file": "agent-architect.md",
    "capabilities": [
      "Proper YAML front-matter following AGENT_TEMPLATE.md",
      "Agents saved as Markdown (.md) files, not YAML files",
      "Clear, single-purpose descriptions",
      "Minimal necessary tool permissions",
      "Comprehensive system prompts",
      "Coordination protocols with related agents",
      "Anthropic's latest sub-agent guidelines",
      "Naming conventions (lowercase-hyphenated)",
      "Project structure (.claude/agents/ directory)",
      "Tool permission best practices",
      "Documentation standards",
      "Analyze existing agents to avoid duplication",
      "Identify coverage gaps",
      "Design coordination patterns",
      "Plan integration points",
      "Have unique, descriptive names",
      "Include all required YAML fields",
      "Specify appropriate tool permissions",
      "Contain detailed system prompts",
      "Include usage examples",
      "Claude Code agent design patterns and architecture",
      "Anthropic's sub-agent documentation and standards",
      "Tool permission modeling and security considerations",
      "Agent ecosystem management and coordination patterns",
      "YAML front-matter structure and markdown formatting"
    ],
    "tools": [
      "Read",
      "Write",
      "Glob",
      "Grep",
      "LS",
      "WebFetch"
    ],
    "coordination_patterns": [
      "YAML front-matter structure and markdown formatting",
      "Anthropic's latest sub-agent guidelines",
      "Naming conventions (lowercase-hyphenated)",
      "Project structure (.claude/agents/ directory)",
      "Tool permission best practices",
      "Documentation standards",
      "Analyze existing agents to avoid duplication",
      "Identify coverage gaps",
      "Design coordination patterns",
      "Plan integration points",
      "Have unique, descriptive names",
      "Include all required YAML fields",
      "Specify appropriate tool permissions",
      "Contain detailed system prompts",
      "Include usage examples",
      "Plan escalation paths",
      "Start with minimal permissions",
      "Add only necessary tools for the agent's role",
      "Document rationale for each permission",
      "Verify tools against latest Anthropic documentation",
      "Create complete agent definition file with .md extension",
      "Include all YAML front-matter fields between --- markers",
      "Write comprehensive system prompt in Markdown after frontmatter",
      "Add coordination protocols",
      "Include concrete usage examples",
      "Update ecosystem documentation",
      "Add to agent directory listings",
      "Document coordination patterns"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Use EXCLUSIVELY for creating new Claude Code subagents with proper YAML structure and tool permissions. MUST BE USED when designing agents, updating agent definitions, or analyzing agent ecosystem gaps",
    "color": "purple"
  },
  {
    "name": "agent-auditor",
    "file": "agent-auditor.md",
    "capabilities": [],
    "tools": [
      "Read",
      "Glob",
      "Grep",
      "LS"
    ],
    "coordination_patterns": [],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [
      "Flag vague or overly technical descriptions"
    ],
    "orchestration_notes": [],
    "description": "Use for validating agent YAML compliance, checking tool permissions, validating category colors, and identifying missing agent capabilities. MUST BE USED when auditing agents for Task tool violations or category gaps",
    "color": "red"
  },
  {
    "name": "api-architect",
    "file": "api-architect.md",
    "capabilities": [
      "Design REST and GraphQL APIs following industry best practices and organizational standards",
      "Create comprehensive OpenAPI 3.0 specifications with detailed schemas and examples",
      "Implement API design patterns that promote consistency, usability, and maintainability",
      "Design API authentication and authorization patterns including OAuth 2.0, JWT, and API keys",
      "Establish API versioning strategies that enable backward compatibility and smooth migrations",
      "Implement production-ready API endpoints using modern frameworks and best practices",
      "Build REST APIs with proper HTTP method usage, status codes, and resource modeling",
      "Develop GraphQL schemas, resolvers, and subscription implementations",
      "Create API middleware for authentication, rate limiting, logging, and error handling",
      "Implement API testing strategies including unit tests, integration tests, and contract testing",
      "Establish organization-wide API design guidelines and governance policies",
      "Create API review processes and quality gates for new API development",
      "Implement API lifecycle management from design through deprecation",
      "Design API testing strategies including contract testing, integration testing, and load testing",
      "Establish API monitoring and analytics for usage patterns and performance optimization",
      "Generate multi-language SDKs from OpenAPI specifications",
      "Create comprehensive API documentation with examples, tutorials, and best practices",
      "Design API developer portals with interactive documentation and testing capabilities",
      "Implement API onboarding processes and developer support resources",
      "Create API discovery and catalog management for large-scale API ecosystems",
      "Implement API contract testing to ensure frontend-backend compatibility",
      "Design API gateway configurations for routing, rate limiting, and transformation",
      "Establish API mocking and testing environments for development and testing",
      "Create API schema validation and compatibility checking automation",
      "Implement API federation strategies for microservices architectures"
    ],
    "tools": [
      "Read",
      "Write",
      "Grep",
      "Glob",
      "LS",
      "Edit",
      "MultiEdit",
      "TodoWrite",
      "WebFetch"
    ],
    "coordination_patterns": [
      "**API-Architect \u2192 Backend-Engineer**: Provides detailed specs and basic implementation \u2192 Backend-Engineer optimizes for scale",
      "**Backend-Engineer \u2192 API-Architect**: Provides implementation constraints, performance feedback, feasibility input",
      "**Parallel work**: API-Architect implements standard endpoints while Backend-Engineer prepares high-performance infrastructure",
      "**Backend Teams**: Provide API specifications and collaborate on complex implementation",
      "**Frontend Teams**: Deliver API contracts and integration support",
      "**QA Teams**: Collaborate on API testing strategies and automation",
      "**DevOps Teams**: Work on API deployment and infrastructure requirements",
      "**Product Teams**: Translate business requirements into API functionality",
      "**API Documentation**: Create comprehensive, user-friendly API documentation",
      "**Developer Support**: Provide technical support and guidance for API integration",
      "**Training Materials**: Develop API usage tutorials and best practices guides",
      "**Community Feedback**: Collect and incorporate developer feedback into API improvements",
      "**API Evangelism**: Promote API adoption and proper usage patterns",
      "**Design Reviews**: Conduct regular API design reviews and approval processes",
      "**Standards Evolution**: Continuously improve API design standards and guidelines",
      "**Compliance Monitoring**: Monitor API implementations for adherence to standards",
      "**Best Practices**: Share API design knowledge and lessons learned across teams",
      "**Industry Standards**: Stay current with API industry standards and emerging patterns"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Use for API design, OpenAPI specs, governance policies, SDK generation, and standard API implementation. MUST BE USED for API strategy, versioning, documentation, and GraphQL federation",
    "color": "red"
  },
  {
    "name": "api-contract-tester",
    "file": "api-contract-tester.md",
    "capabilities": [],
    "tools": [
      "Read",
      "Write",
      "Edit",
      "Bash",
      "Grep",
      "Glob"
    ],
    "coordination_patterns": [],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Use for validating APIs against specifications, detecting breaking changes, and generating contract tests. MUST BE USED when testing API compliance or creating mock servers from specs",
    "color": "green"
  },
  {
    "name": "api-documenter",
    "file": "api-documenter.md",
    "capabilities": [],
    "tools": [
      "Read",
      "Write",
      "Edit",
      "Grep",
      "Glob"
    ],
    "coordination_patterns": [],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Use for generating API documentation, OpenAPI specs from code, SDK docs, and developer guides. MUST BE USED when creating interactive API docs or Postman collections",
    "color": "yellow"
  },
  {
    "name": "backend-engineer",
    "file": "backend-engineer.md",
    "capabilities": [
      "**Distributed Systems**: Consensus algorithms, CAP theorem, distributed transactions, service mesh",
      "**Microservices**: Service boundaries, inter-service communication, API gateways, event-driven architecture",
      "**Performance**: Sub-100ms latency optimization, 100k+ RPS handling, horizontal scaling",
      "**Databases**: SQL/NoSQL optimization, sharding, replication strategies, query optimization",
      "**Message Queues**: Kafka, RabbitMQ, Redis Pub/Sub, event streaming architectures",
      "**Caching**: Multi-tier caching strategies, cache invalidation patterns, distributed caching",
      "**Security**: OAuth2/JWT, API security, encryption at rest/in transit, threat modeling"
    ],
    "tools": [
      "Read",
      "Write",
      "Edit",
      "MultiEdit",
      "Grep",
      "Glob",
      "LS",
      "Bash",
      "TodoWrite",
      "WebFetch"
    ],
    "coordination_patterns": [],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Use for building server-side systems, APIs, microservices, databases, and distributed architectures. MUST BE USED for high-performance optimization (>10k RPS), event-driven systems, and cloud-native backend development",
    "color": "blue"
  },
  {
    "name": "business-analyst",
    "file": "business-analyst.md",
    "capabilities": [],
    "tools": [
      "Read",
      "Write",
      "Grep",
      "Glob",
      "LS",
      "TodoWrite",
      "WebFetch"
    ],
    "coordination_patterns": [
      "Requirements management systems",
      "Collaborative documentation tools",
      "Virtual workshop platforms",
      "Feedback collection tools",
      "Stakeholder communication portals"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Use for gathering requirements, stakeholder analysis, process mapping, and business-technical translation. MUST BE USED when creating user stories, BPM diagrams, or conducting gap analysis",
    "color": "purple"
  },
  {
    "name": "cloud-architect",
    "file": "cloud-architect.md",
    "capabilities": [
      "Design scalable, resilient, and cost-effective cloud architectures",
      "Select appropriate cloud services based on requirements and constraints",
      "Create detailed architecture diagrams and documentation",
      "Balance between cloud-native services and portable solutions",
      "Consider multi-cloud and hybrid cloud scenarios",
      "Assess existing applications for cloud readiness",
      "Develop migration strategies using the 6Rs framework",
      "Create migration roadmaps with clear phases and dependencies",
      "Design for minimal downtime and risk mitigation",
      "Plan data migration and synchronization strategies",
      "Analyze cloud spending patterns and identify optimization opportunities",
      "Design architectures with cost efficiency in mind",
      "Implement FinOps practices and cost allocation strategies",
      "Recommend reserved instances, savings plans, and spot usage",
      "Set up cost monitoring and alerting mechanisms",
      "Design secure cloud architectures following zero-trust principles",
      "Implement proper identity and access management (IAM)",
      "Ensure compliance with relevant frameworks and regulations",
      "Design for data protection, encryption, and privacy",
      "Plan for disaster recovery and business continuity",
      "Architect serverless solutions for appropriate use cases",
      "Design container-based architectures with Kubernetes",
      "Implement event-driven and microservices patterns",
      "Leverage managed services to reduce operational overhead",
      "Design for cloud-native observability and monitoring"
    ],
    "tools": [
      "Read",
      "Write",
      "Edit",
      "MultiEdit",
      "Grep",
      "Glob",
      "LS",
      "Bash",
      "TodoWrite",
      "WebFetch"
    ],
    "coordination_patterns": [
      "Align cloud strategy with enterprise architecture",
      "Validate major architectural decisions",
      "Ensure consistency with organizational standards",
      "Use Task tool to provide detailed implementation specifications",
      "Use Task tool to request infrastructure code reviews",
      "Use Task tool to coordinate on operational procedures",
      "Use Task tool to validate security architecture and controls",
      "Use Task tool to ensure compliance with security frameworks",
      "Use Task tool to review IAM policies and network security",
      "Use Task tool to design for automated deployment",
      "Use Task tool to plan CI/CD pipeline integration",
      "Use Task tool to coordinate on monitoring and alerting"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Use for cloud architecture design, migration planning, cost optimization, and multi-cloud strategies. MUST BE USED for AWS/Azure/GCP implementations, IaC, and cloud-native patterns",
    "color": "yellow"
  },
  {
    "name": "code-reviewer",
    "file": "code-reviewer.md",
    "capabilities": [
      "Code quality and adherence to best practices",
      "Security vulnerabilities and potential exploits",
      "Performance implications and optimization opportunities",
      "Maintainability and readability concerns",
      "Proper error handling and edge case coverage",
      "Test coverage and quality",
      "First, search for and analyze any `.coderabbit.yml`, `.coderabbit.yaml`, or similar configuration files",
      "Apply the specific rules, patterns, and standards defined in the configuration",
      "If no configuration exists, apply industry-standard best practices for the detected language/framework",
      "**Frontend**: React, Vue, Angular, TypeScript, JavaScript, HTML, CSS",
      "**Backend**: Node.js, Python, Java, Go, Rust, C++, C#",
      "**Mobile**: Swift, Kotlin, React Native, Flutter",
      "**Infrastructure**: Docker, Kubernetes, Terraform, CloudFormation",
      "**Databases**: SQL optimization, NoSQL patterns, migration scripts"
    ],
    "tools": [
      "Read",
      "Grep",
      "Glob",
      "LS",
      "Bash"
    ],
    "coordination_patterns": [
      "For critical security issues: Delegate security audit work with specific context",
      "For performance problems: Use Task tool to engage performance-engineer with measurements",
      "For test coverage gaps: Delegate testing and QA work with coverage requirements",
      "For architectural issues: Use Task tool to engage principal-architect with architectural concerns",
      "For documentation gaps: Use Task tool to engage tech-writer with documentation needs"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Use PROACTIVELY after code changes for quality review, security checks, and best practices validation. MUST BE USED before commits to ensure production-ready code and prevent vulnerabilities",
    "color": "green"
  },
  {
    "name": "codebase-analyst",
    "file": "codebase-analyst.md",
    "capabilities": [],
    "tools": [
      "Read",
      "Grep",
      "Glob",
      "LS"
    ],
    "coordination_patterns": [
      "**Security audit work**: When identifying potential security vulnerabilities for deeper analysis",
      "**performance-engineer**: When finding performance bottlenecks requiring optimization",
      "**tech-writer**: When documentation gaps need to be addressed",
      "**backend-dev/frontend-engineer**: When implementation improvements are needed based on analysis",
      "**principal-architect**: Requests for architecture analysis and technical debt assessment",
      "**project-orchestrator**: Requirements for multi-domain analysis across large systems",
      "**product-strategy-expert**: Business-driven analysis requests",
      "**Multiple codebase-analyst instances**: For comprehensive analysis of large systems",
      "**0**: Can analyze code quality while QA analyzes test coverage",
      "**Security analysis**: Can work simultaneously on different aspects of the codebase",
      "**Multiple codebase-analyst instances**: For comprehensive analysis of large systems",
      "**0**: Can analyze code quality while QA analyzes test coverage",
      "**Security analysis**: Can work simultaneously on different aspects of the codebase"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Use for analyzing code architecture, technical debt assessment, and dependency mapping. MUST BE USED when evaluating codebases, creating executive summaries, or identifying risks",
    "color": "purple"
  },
  {
    "name": "config-specialist",
    "file": "config-specialist.md",
    "capabilities": [
      "Find all configuration files in one sweep",
      "Identify configuration patterns across languages",
      "Detect environment-specific configs",
      "Map configuration dependencies",
      "Parse multiple config formats efficiently",
      "Identify missing or conflicting settings",
      "Validate configuration completeness",
      "Compare configurations across environments",
      "Update configurations in batch",
      "Maintain consistency across files",
      "Handle sensitive data appropriately",
      "Generate configuration templates",
      "Sync configurations across environments",
      "Manage environment variables",
      "Handle secrets and credentials safely",
      "Document configuration requirements"
    ],
    "tools": [
      "glob",
      "grep",
      "read",
      "write"
    ],
    "coordination_patterns": [
      "Sync configurations across environments",
      "Manage environment variables",
      "Handle secrets and credentials safely",
      "Document configuration requirements",
      "**With security specialists**: For sensitive configuration review",
      "**With devops-engineer**: For deployment configurations",
      "**With backend-architect**: For service configurations",
      "**Escalate to specialists for reliability engineering work**: For production config issues"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Efficiently finds and manages configuration files across projects",
    "color": "orange"
  },
  {
    "name": "data-engineer",
    "file": "data-engineer.md",
    "capabilities": [],
    "tools": [
      "Read",
      "Write",
      "Edit",
      "MultiEdit",
      "Grep",
      "Glob",
      "LS",
      "Bash",
      "TodoWrite",
      "WebFetch"
    ],
    "coordination_patterns": [
      "**backend-dev**: When application integration is needed, provide optimized data access APIs and schemas",
      "**Platform engineering work**: For infrastructure provisioning, Kubernetes deployments, and resource scaling",
      "**performance-engineer**: For system-wide performance optimization requiring cross-component coordination",
      "**backend-dev**: Application data requirements and integration patterns",
      "**principal-architect**: Data platform architecture and technology decisions",
      "**Security audit work**: Data security requirements and compliance constraints",
      "**backend-dev**: Can work simultaneously once data contracts are defined",
      "**Platform engineering**: Can design data infrastructure while platform setup proceeds",
      "**multiple data-engineer instances**: For large data platforms with independent domains",
      "**backend-dev**: Can work simultaneously once data contracts are defined",
      "**Platform engineering**: Can design data infrastructure while platform setup proceeds",
      "**multiple data-engineer instances**: For large data platforms with independent domains"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Use for building data pipelines, ETL/ELT systems, data warehouses, and stream processing. MUST BE USED for big data platforms, ML infrastructure, and real-time data architectures",
    "color": "blue"
  },
  {
    "name": "data-scientist",
    "file": "data-scientist.md",
    "capabilities": [],
    "tools": [
      "Read",
      "Write",
      "Edit",
      "Bash",
      "Grep",
      "Glob",
      "LS",
      "TodoWrite",
      "WebFetch"
    ],
    "coordination_patterns": [],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Use for statistical analysis, A/B testing, ML model evaluation, and data insights. MUST BE USED for experiment design, hypothesis testing, and causal inference analysis",
    "color": "yellow"
  },
  {
    "name": "database-admin",
    "file": "database-admin.md",
    "capabilities": [
      "Primary expertise in specialized domain",
      "Collaborative approach with other agents",
      "Focus on quality and best practices"
    ],
    "tools": [
      "Read",
      "Write",
      "Edit",
      "Bash",
      "Grep",
      "Glob",
      "LS",
      "TodoWrite"
    ],
    "coordination_patterns": [
      "Works well with parallel agents for efficient execution",
      "Clear handoff protocols with downstream agents",
      "Escalates complex decisions appropriately"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [
      "When specialized expertise is required",
      "For tasks requiring database admin skills"
    ],
    "orchestration_notes": [],
    "description": "Use for database optimization, security hardening, backup strategies, and performance tuning. MUST BE USED for query optimization, index management, and database administration",
    "color": "blue"
  },
  {
    "name": "debugger",
    "file": "debugger.md",
    "capabilities": [
      "**Ask specific, targeted questions** about implementation details",
      "**Request code analysis** from domain experts when needed",
      "**Seek architectural insights** for complex system interactions",
      "**Always specify what information you need and why** when collaborating"
    ],
    "tools": [
      "Read",
      "Grep",
      "Glob",
      "LS",
      "Bash"
    ],
    "coordination_patterns": [
      "Simple, easily reproducible bugs (delegate general development work)",
      "Known error patterns with obvious solutions (use domain specialists)",
      "Performance optimization without mysterious behavior (delegate performance engineering work)",
      "Code quality issues (delegate code review work)",
      "Configuration or deployment issues (delegate DevOps and infrastructure work)",
      "Intermittent failures that happen <50% of the time",
      "Race conditions or timing-dependent bugs",
      "Memory leaks or resource exhaustion with unclear causes",
      "Distributed system failures with cascading effects",
      "Bugs that only occur under specific load or environmental conditions",
      "Issues that persist after obvious fixes have been attempted",
      "Problems with misleading error messages or symptoms",
      "Concurrency bugs in multi-threaded applications",
      "Production-only bugs that can't be reproduced in development",
      "**Ask specific, targeted questions** about implementation details",
      "**Request code analysis** from domain experts when needed",
      "**Seek architectural insights** for complex system interactions",
      "**Always specify what information you need and why** when collaborating"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [
      "Simple, easily reproducible bugs (delegate general development work)",
      "Known error patterns with obvious solutions (use domain specialists)",
      "Performance optimization without mysterious behavior (delegate performance engineering work)",
      "Code quality issues (delegate code review work)",
      "Configuration or deployment issues (delegate DevOps and infrastructure work)",
      "Intermittent failures that happen <50% of the time",
      "Race conditions or timing-dependent bugs",
      "Memory leaks or resource exhaustion with unclear causes",
      "Distributed system failures with cascading effects",
      "Bugs that only occur under specific load or environmental conditions",
      "Issues that persist after obvious fixes have been attempted",
      "Problems with misleading error messages or symptoms",
      "Concurrency bugs in multi-threaded applications",
      "Production-only bugs that can't be reproduced in development"
    ],
    "orchestration_notes": [],
    "description": "Use for investigating complex, intermittent bugs, race conditions, and production-only issues. MUST BE USED for memory leaks, distributed system failures, and systematic root cause analysis",
    "color": "green"
  },
  {
    "name": "dependency-manager",
    "file": "dependency-manager.md",
    "capabilities": [
      "Automatically identify which package managers are in use",
      "Detect package files: package.json, requirements.txt, Cargo.toml, go.mod, Gemfile, etc.",
      "Determine the appropriate commands for each ecosystem",
      "Install dependencies across all detected package managers",
      "Update dependencies with appropriate strategies",
      "Add new dependencies to the correct files",
      "Remove unused dependencies",
      "Audit for security vulnerabilities",
      "Show dependency trees",
      "Identify outdated packages",
      "Find duplicate or conflicting dependencies",
      "Analyze dependency size and impact",
      "Ensure lock files are properly maintained",
      "Resolve lock file conflicts",
      "Regenerate lock files when needed"
    ],
    "tools": [
      "bash",
      "read",
      "write",
      "glob",
      "grep"
    ],
    "coordination_patterns": [
      "Works with **codebase-analyst** to understand project structure",
      "Coordinates with **security specialists** for vulnerability scanning",
      "Partners with **build-engineer** for CI/CD dependency caching"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Unified interface for package management across npm, pip, cargo, go mod, and other package managers",
    "color": "orange"
  },
  {
    "name": "devops",
    "file": "devops.md",
    "capabilities": [
      "**Languages**: Bash, Python, Go, YAML",
      "**Pipelines**: GitHub Actions, GitLab CI, Jenkins",
      "**Containers**: Docker, Buildah, Podman",
      "**Orchestration**: Kubernetes, Helm, ArgoCD",
      "**IaC**: Terraform, Ansible, CloudFormation",
      "**Monitoring**: Prometheus, Grafana, ELK"
    ],
    "tools": [
      "Read",
      "Write",
      "Edit",
      "MultiEdit",
      "Grep",
      "Glob",
      "LS",
      "Bash",
      "TodoWrite",
      "WebFetch"
    ],
    "coordination_patterns": [],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Use for CI/CD pipelines, containerization, IaC, and deployment automation. MUST BE USED for Kubernetes, Terraform, monitoring setup, and DevSecOps practices",
    "color": "yellow"
  },
  {
    "name": "documentation-finder",
    "file": "documentation-finder.md",
    "capabilities": [
      "Search project documentation files",
      "Extract inline code documentation",
      "Find relevant online resources",
      "Locate API documentation",
      "Minimize search queries through patterns",
      "Batch related documentation reads",
      "Cache common lookups",
      "Prioritize authoritative sources",
      "Gather complete documentation sets",
      "Build comprehensive references",
      "Link related documentation",
      "Generate documentation maps",
      "Identify documentation gaps",
      "Find outdated information",
      "Locate examples and tutorials",
      "Map documentation structure"
    ],
    "tools": [
      "glob",
      "grep",
      "read",
      "webfetch"
    ],
    "coordination_patterns": [
      "**With tech-writer**: For documentation creation",
      "**With code-reviewer**: For documentation standards",
      "**With codebase-analyst**: For comprehensive analysis",
      "**With search-coordinator**: For complex searches"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Intelligently searches across all documentation sources with minimal queries",
    "color": "yellow"
  },
  {
    "name": "error-resolver",
    "file": "error-resolver.md",
    "capabilities": [
      "Extract full error context in one pass",
      "Identify error patterns and root causes",
      "Gather relevant code context automatically",
      "Trace error propagation paths",
      "Match errors to known solutions",
      "Identify configuration issues",
      "Detect dependency problems",
      "Analyze stack traces efficiently",
      "Provide targeted fixes",
      "Generate test cases for verification",
      "Create preventive measures",
      "Document resolution steps",
      "Build error knowledge base",
      "Identify recurring issues",
      "Suggest systematic improvements",
      "Prevent future occurrences"
    ],
    "tools": [
      "read",
      "grep",
      "glob",
      "bash"
    ],
    "coordination_patterns": [
      "**With debugger**: For complex runtime issues",
      "**With testing specialists**: To create regression tests",
      "**With devops-engineer**: For infrastructure errors",
      "**Escalate to specialists for incident response coordination work**: For production issues"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Automatically gathers context from errors and suggests targeted fixes",
    "color": "green"
  },
  {
    "name": "file-navigator",
    "file": "file-navigator.md",
    "capabilities": [
      "**Intelligent Navigation**: Find files using context-aware patterns and common conventions",
      "**Project Structure Analysis**: Understand and navigate standard project layouts",
      "**Efficient Path Resolution**: Minimize file system operations to locate targets",
      "**Pattern Recognition**: Identify common file naming and organization patterns",
      "**Multi-Language Support**: Navigate projects in any programming language"
    ],
    "tools": [
      "ls",
      "find",
      "glob",
      "read",
      "grep",
      "bash"
    ],
    "coordination_patterns": [],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Intelligent file system exploration and navigation with context-aware patterns and common conventions",
    "color": "orange"
  },
  {
    "name": "file-writer",
    "file": "file-writer.md",
    "capabilities": [
      "Create multiple files in a single coordinated operation",
      "Update multiple files with common patterns",
      "Generate file sets from templates",
      "Handle bulk file transformations",
      "Generate files from predefined templates",
      "Support variable substitution in templates",
      "Create file structures from patterns",
      "Handle dynamic content generation",
      "Create nested directory structures efficiently",
      "Ensure directories exist before writing files",
      "Handle cross-platform path operations",
      "Manage file organization patterns",
      "Generate files based on naming patterns",
      "Create numbered sequences of files",
      "Handle date/time-based file naming",
      "Support glob pattern expansions"
    ],
    "tools": [
      "write",
      "glob",
      "read"
    ],
    "coordination_patterns": [
      "**With code-generator**: Receive generated code for batch creation",
      "**With project-orchestrator**: Follow project structure guidelines",
      "**With tech-writer**: Coordinate on documentation generation",
      "**With testing specialists**: Create test file structures"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Efficient batch file writing and template-based file generation specialist",
    "color": "orange"
  },
  {
    "name": "frontend-engineer",
    "file": "frontend-engineer.md",
    "capabilities": [
      "**Modern Frameworks**: React, Vue.js, Angular, Svelte, Next.js, Nuxt.js",
      "**State Management**: Redux, MobX, Vuex, Pinia, Context API, Recoil",
      "**Build Tools**: Webpack, Vite, Parcel, Rollup, esbuild",
      "**CSS Technologies**: CSS-in-JS, Tailwind CSS, SCSS/SASS, CSS Modules",
      "**Testing**: Jest, Testing Library, Cypress, Playwright, Vitest",
      "**Performance**: Lighthouse optimization, bundle analysis, lazy loading strategies"
    ],
    "tools": [
      "Read",
      "Write",
      "Edit",
      "MultiEdit",
      "Grep",
      "Glob",
      "LS",
      "Bash",
      "TodoWrite",
      "WebFetch"
    ],
    "coordination_patterns": [],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Use for building React/Vue/Angular apps, state management, and frontend optimization. MUST BE USED for responsive design, accessibility implementation, and Core Web Vitals",
    "color": "blue"
  },
  {
    "name": "fullstack-lead",
    "file": "fullstack-lead.md",
    "capabilities": [
      "Primary expertise in development domain",
      "Collaborative approach with other agents",
      "Focus on quality and best practices"
    ],
    "tools": [
      "Read",
      "Write",
      "Edit",
      "MultiEdit",
      "Grep",
      "Glob",
      "LS",
      "Bash",
      "TodoWrite",
      "WebFetch"
    ],
    "coordination_patterns": [
      "Works well with parallel agents for efficient execution",
      "Clear handoff protocols with downstream agents",
      "Escalates complex decisions appropriately"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [
      "When development expertise is required",
      "For tasks requiring fullstack lead skills"
    ],
    "orchestration_notes": [],
    "description": "Use for end-to-end feature development requiring both frontend and backend expertise. MUST BE USED for complex integrations, system-wide changes, and cross-stack optimization",
    "color": "blue"
  },
  {
    "name": "git-workflow",
    "file": "git-workflow.md",
    "capabilities": [
      "Batch common git operations into efficient workflows",
      "Automate repetitive git tasks with smart defaults",
      "Handle complex branching and merging scenarios",
      "Streamline commit, push, and PR workflows",
      "Provide comprehensive repository status overviews",
      "Identify uncommitted changes across multiple files",
      "Detect merge conflicts and suggest resolutions",
      "Track branch relationships and divergence",
      "Efficiently search commit history",
      "Find specific changes across branches",
      "Analyze contributor patterns",
      "Generate meaningful commit summaries",
      "Automate branch creation with proper naming",
      "Handle feature branch workflows",
      "Clean up stale branches",
      "Manage remote tracking relationships"
    ],
    "tools": [
      "bash",
      "read",
      "write",
      "glob"
    ],
    "coordination_patterns": [
      "**With code-reviewer**: Prepare branches for review",
      "**With devops-engineer**: Handle deployment branches",
      "**With testing specialists**: Manage test branch strategies",
      "**Escalate to specialists for incident response coordination work**: For complex merge conflicts"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Streamlines common git operations and workflows with intelligent automation",
    "color": "orange"
  },
  {
    "name": "incident-commander",
    "file": "incident-commander.md",
    "capabilities": [],
    "tools": [
      "Read",
      "Grep",
      "Glob",
      "LS",
      "Bash",
      "TodoWrite"
    ],
    "coordination_patterns": [
      "Read",
      "Grep",
      "Glob",
      "LS",
      "Bash",
      "TodoWrite",
      "WebFetch",
      "**Crisis Communication**: Stakeholder updates, status pages, customer communication",
      "**Recovery Planning**: Mitigation strategies, rollback procedures, failover execution",
      "**Post-Mortem Leadership**: Blameless culture, root cause analysis, action item tracking",
      "**Rapid Triage**: Quick problem identification and initial response",
      "**Resource Mobilization**: Assembling right experts, tools, and access",
      "**Parallel Workstreams**: Coordinating multiple investigation paths",
      "**Decision Making**: Risk assessment, trade-off analysis, recovery priorities",
      "**Documentation**: Real-time incident timeline, decision logging"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Use for production incidents, outages, and crisis management. MUST BE USED for war room coordination, severity assessment, and leading post-mortem analysis",
    "color": "orange"
  },
  {
    "name": "ml-engineer",
    "file": "ml-engineer.md",
    "capabilities": [],
    "tools": [
      "Read",
      "Write",
      "Edit",
      "MultiEdit",
      "Grep",
      "Glob",
      "LS",
      "Bash",
      "TodoWrite",
      "WebFetch"
    ],
    "coordination_patterns": [],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Use for ML model deployment, MLOps pipelines, and production ML systems. MUST BE USED for model serving, feature stores, and distributed training infrastructure",
    "color": "blue"
  },
  {
    "name": "mobile-engineer",
    "file": "mobile-engineer.md",
    "capabilities": [],
    "tools": [
      "Read",
      "Write",
      "Edit",
      "MultiEdit",
      "Grep",
      "Glob",
      "LS",
      "Bash",
      "TodoWrite",
      "WebFetch"
    ],
    "coordination_patterns": [
      "Enterprise or B2B mobile applications"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Use for iOS/Android native apps, React Native, and Flutter development. MUST BE USED for mobile architecture, app store deployment, and device-specific features",
    "color": "blue"
  },
  {
    "name": "mobile-ui",
    "file": "mobile-ui.md",
    "capabilities": [
      "**React Native**: Core and community packages",
      "**Styling**: StyleSheet, styled-components/native",
      "**Navigation**: React Navigation, native navigation",
      "**Animations**: Reanimated 2, Gesture Handler",
      "**State Management**: Redux, MobX, Zustand",
      "**Native Modules**: iOS/Android bridge code"
    ],
    "tools": [
      "Read",
      "Write",
      "Edit",
      "Grep",
      "Glob",
      "LS",
      "TodoWrite"
    ],
    "coordination_patterns": [],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Use for iOS Human Interface Guidelines and Android Material Design implementation. MUST BE USED for mobile-specific UI patterns, gestures, and platform adaptations",
    "color": "red"
  },
  {
    "name": "network-engineer",
    "file": "network-engineer.md",
    "capabilities": [],
    "tools": [
      "Read",
      "Write",
      "Edit",
      "Bash",
      "Grep",
      "Glob",
      "LS",
      "TodoWrite"
    ],
    "coordination_patterns": [],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Use for network design, routing protocols, load balancing, and CDN optimization. MUST BE USED for network security, VPN setup, and packet-level troubleshooting",
    "color": "orange"
  },
  {
    "name": "performance-engineer",
    "file": "performance-engineer.md",
    "capabilities": [
      "Conduct comprehensive performance profiling using APM tools and custom instrumentation",
      "Identify CPU, memory, I/O, and network bottlenecks through systematic analysis",
      "Analyze application performance patterns and resource utilization trends",
      "Optimize database queries, API endpoints, and critical code paths",
      "Implement caching strategies and performance-oriented architectural patterns",
      "Design realistic load testing scenarios based on production traffic patterns",
      "Implement comprehensive load testing suites using tools like K6, JMeter, Gatling",
      "Conduct stress testing, spike testing, and endurance testing protocols",
      "Perform capacity planning analysis with growth projections and resource requirements",
      "Validate system behavior under various load conditions and failure scenarios",
      "Analyze horizontal and vertical scaling characteristics of system components",
      "Design auto-scaling policies based on performance metrics and business requirements",
      "Optimize resource allocation and cost efficiency for cloud deployments",
      "Implement performance monitoring and alerting for proactive issue detection",
      "Design performance benchmarks and regression testing automation",
      "Implement comprehensive performance monitoring using metrics, traces, and logs",
      "Design custom dashboards for performance KPIs and SLA monitoring",
      "Establish performance baselines and regression detection systems",
      "Create automated performance testing integration with CI/CD pipelines",
      "Implement distributed tracing for microservices performance analysis"
    ],
    "tools": [
      "Read",
      "Write",
      "Edit",
      "Grep",
      "Glob",
      "LS",
      "Bash",
      "TodoWrite"
    ],
    "coordination_patterns": [
      "**Executive Dashboards**: High-level performance KPIs and business impact metrics",
      "**Technical Reports**: Detailed analysis with bottleneck identification and optimization recommendations",
      "**Load Testing Results**: Comprehensive test results with capacity planning insights",
      "**Optimization Impact**: Before/after performance comparisons with quantified improvements",
      "**Development Teams**: Provide performance guidelines and optimization recommendations",
      "**DevOps Teams**: Collaborate on infrastructure scaling and monitoring implementation",
      "**QA Teams**: Integrate performance testing into quality assurance workflows",
      "**Product Teams**: Translate performance improvements into user experience benefits",
      "**Backend Staff**: For server-side optimization implementation and architecture changes",
      "**Frontend Staff**: For client-side optimization and user experience improvements",
      "**Principal Architect**: For system-wide performance architecture decisions",
      "**Platform Engineer**: For production monitoring and incident response coordination"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Use for performance profiling, load testing, and bottleneck analysis. MUST BE USED for capacity planning, scalability testing, and performance regression detection",
    "color": "green"
  },
  {
    "name": "platform-engineer",
    "file": "platform-engineer.md",
    "capabilities": [
      "Design and implement Service Level Indicators (SLIs) and Service Level Objectives (SLOs)",
      "Establish error budgets and reliability targets based on business requirements",
      "Implement chaos engineering practices to improve system resilience",
      "Design automated incident response and self-healing system capabilities",
      "Create comprehensive runbooks and incident response procedures",
      "Implement comprehensive monitoring strategy with metrics, logs, and distributed tracing",
      "Design custom dashboards for operational visibility and business KPI tracking",
      "Establish alerting strategies that minimize false positives and alert fatigue",
      "Implement observability for microservices architectures with service mesh integration",
      "Create monitoring as code practices for consistent observability deployment",
      "Design and implement production deployment strategies with proper rollback mechanisms",
      "Establish capacity planning processes with automated scaling based on demand",
      "Implement production security monitoring and compliance logging",
      "Create disaster recovery procedures and business continuity planning",
      "Manage production environments with infrastructure as code principles",
      "Design incident response procedures with clear escalation paths and communication protocols",
      "Implement automated incident detection and initial response systems",
      "Create post-incident review processes with actionable improvement recommendations",
      "Establish on-call rotation management with fair workload distribution",
      "Implement incident analysis and trend identification for proactive improvements"
    ],
    "tools": [
      "Read",
      "Write",
      "Edit",
      "MultiEdit",
      "Grep",
      "Glob",
      "LS",
      "Bash",
      "TodoWrite",
      "WebFetch"
    ],
    "coordination_patterns": [
      "**Development Teams**: Provide observability requirements and production readiness guidelines",
      "**DevOps Teams**: Collaborate on infrastructure monitoring and deployment automation",
      "**Security Teams**: Integrate security monitoring with operational observability",
      "**Product Teams**: Translate reliability metrics into user experience impact",
      "**Principal Architect**: For system-wide reliability architecture decisions",
      "**Backend Staff**: For application-specific reliability and performance improvements",
      "**Security Team**: For security incidents and compliance issues",
      "**Management**: For significant outages and business impact communication",
      "Automate repetitive operational tasks and incident response procedures",
      "Implement predictive monitoring and proactive issue detection",
      "Research emerging observability tools and reliability engineering practices",
      "Experiment with chaos engineering and resilience testing methodologies",
      "Contribute to SRE community knowledge and best practices",
      "Regular review and optimization of monitoring and alerting effectiveness",
      "Continuous improvement of incident response procedures and recovery times",
      "Optimization of operational costs while maintaining reliability targets",
      "Regular disaster recovery testing and business continuity validation",
      "Maintenance of operational documentation and knowledge management"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Use for SRE practices, observability implementation, and production operations. MUST BE USED for SLO/SLI definition, monitoring setup, and incident response automation",
    "color": "yellow"
  },
  {
    "name": "principal-architect",
    "file": "principal-architect.md",
    "capabilities": [],
    "tools": [
      "Read",
      "Write",
      "Grep",
      "Glob",
      "LS",
      "TodoWrite",
      "WebFetch"
    ],
    "coordination_patterns": [
      "Read",
      "Write",
      "Grep",
      "Glob",
      "LS",
      "TodoWrite",
      "WebFetch",
      "WebSearch",
      "Codebase architecture analysis",
      "Technical debt assessment",
      "Technology evaluation and selection",
      "Performance bottleneck identification",
      "Code quality metrics gathering",
      "Technical documentation creation",
      "API documentation and examples",
      "Architecture decision records",
      "User guides and tutorials",
      "Code commenting standards",
      "UI/UX design and wireframing",
      "Design system development",
      "Accessibility design patterns",
      "Mobile and responsive design",
      "User experience optimization",
      "Multi-agent task orchestration",
      "Timeline and dependency management",
      "Progress tracking and reporting",
      "Parallel execution optimization",
      "Cross-team communication",
      "**Parallel Validation**: Run testing, security, and documentation agents concurrently during validation phases",
      "Prerequisites and dependencies between agent tasks",
      "Data/artifact handoffs between agents",
      "Integration points and interfaces",
      "Coordination requirements",
      "**Parallel (Preferred)**: Multiple work streams proceed simultaneously on independent tasks - maximize this pattern",
      "**Parallel with Handoffs**: Concurrent work with staged deliverable exchanges",
      "Sequential: Work B waits for Work A to complete - minimize this pattern",
      "Iterative: Work proceeds in cycles (design \u2192 implement \u2192 test \u2192 document)",
      "Collaborative: Multiple specialists work together on the same deliverable",
      "**Concurrent Research**: Multiple parallel research and analysis efforts",
      "Cross-team communication",
      "[ ] Database Design (Work Type: Backend Development, Timeline: 1 week) [PARALLEL]",
      "[ ] UI Component Library (Work Type: Frontend Development, Timeline: 1 week) [PARALLEL]",
      "[ ] CI/CD Pipeline Setup (Work Type: Infrastructure & DevOps, Timeline: 1 week) [PARALLEL]",
      "[ ] Test Strategy Planning (Work Type: Quality Assurance, Timeline: 1 week) [PARALLEL]",
      "Clearly specify the type of work needed",
      "Consider complexity and specialization requirements",
      "Define clear deliverables and acceptance criteria",
      "Specify dependencies between work items",
      "**Identify parallelizable work**: Break down tasks to enable maximum concurrent execution",
      "[ ] Infrastructure Setup (Work Type: Infrastructure & DevOps, Timeline: 1 week) [PARALLEL]",
      "[ ] Database Architecture (Work Type: Backend Development, Timeline: 1 week) [PARALLEL]",
      "[ ] Design System Foundation (Work Type: Design Work, Timeline: 1 week) [PARALLEL]",
      "[ ] Test Framework Setup (Work Type: Quality Assurance, Timeline: 1 week) [PARALLEL]",
      "[ ] Codebase Analysis (Work Type: Analysis & Research, Timeline: 1 week) [PARALLEL]",
      "**Concurrent Analysis Phase**: Launch multiple `general-purpose` agents for simultaneous research on different aspects",
      "**Domain Parallel Blocks**: Group tasks by domain (backend, frontend, mobile, DevOps) for concurrent execution",
      "**Cross-Functional Parallelism**: Run independent tasks across different disciplines simultaneously",
      "**Staged Parallel Delivery**: Design handoff points that enable next-phase parallel work",
      "**Parallel Validation**: Run testing, security, and documentation agents concurrently during validation phases",
      "Prerequisites and dependencies between agent tasks",
      "Data/artifact handoffs between agents",
      "Integration points and interfaces",
      "Coordination requirements",
      "**Parallel (Preferred)**: Multiple work streams proceed simultaneously on independent tasks - maximize this pattern",
      "**Parallel with Handoffs**: Concurrent work with staged deliverable exchanges",
      "Sequential: Work B waits for Work A to complete - minimize this pattern",
      "Iterative: Work proceeds in cycles (design \u2192 implement \u2192 test \u2192 document)",
      "Collaborative: Multiple specialists work together on the same deliverable",
      "**Concurrent Research**: Multiple parallel research and analysis efforts"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Use for system-wide architecture design, technical roadmaps, and cross-team coordination. MUST BE USED for complex architectural decisions and implementation planning",
    "color": "red"
  },
  {
    "name": "product-strategist",
    "file": "product-strategist.md",
    "capabilities": [],
    "tools": [
      "Read",
      "Write",
      "Grep",
      "Glob",
      "LS",
      "TodoWrite",
      "WebFetch"
    ],
    "coordination_patterns": [],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Use for product vision, feature prioritization, and go-to-market strategy. MUST BE USED for roadmap planning, user research, and business model design",
    "color": "orange"
  },
  {
    "name": "reliability-engineer",
    "file": "reliability-engineer.md",
    "capabilities": [],
    "tools": [
      "Read",
      "Write",
      "Edit",
      "Bash",
      "Grep",
      "Glob",
      "LS",
      "TodoWrite"
    ],
    "coordination_patterns": [],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Use for SLO/SLI definition, error budget management, and reliability patterns. MUST BE USED for chaos engineering, toil reduction, and disaster recovery planning",
    "color": "orange"
  },
  {
    "name": "researcher",
    "file": "researcher.md",
    "capabilities": [
      "Conduct comprehensive technology stack comparisons with objective criteria",
      "Evaluate emerging technologies for potential adoption and business impact",
      "Research open-source vs commercial solutions with total cost of ownership analysis",
      "Assess technology maturity, ecosystem health, and long-term viability",
      "Investigate performance benchmarks, scalability characteristics, and architectural implications",
      "Analyze technology adoption patterns and success stories across industries",
      "Research industry best practices across different sectors and use cases",
      "Investigate regulatory compliance requirements and industry standards",
      "Analyze market trends and their impact on technology and business decisions",
      "Study competitive landscape and technical implementations of market leaders",
      "Research adoption patterns and success stories of technology implementations",
      "Monitor industry consolidation, partnerships, and strategic alliances",
      "Monitor latest academic papers and research publications relevant to technology",
      "Synthesize research findings into practical recommendations for implementation",
      "Track emerging technologies and assess their potential business applications",
      "Research cutting-edge methodologies and best practices from academic institutions",
      "Evaluate experimental technologies and their readiness for production use",
      "Identify research gaps and opportunities for innovation",
      "Conduct technical analysis of competitor implementations and architectures",
      "Research competitor technology stacks, performance characteristics, and user experiences",
      "Analyze public technical documentation and engineering blog posts for insights",
      "Study market positioning and technical differentiation strategies",
      "Investigate patent landscapes and intellectual property considerations",
      "Research funding patterns, acquisitions, and strategic partnerships",
      "Market sizing and opportunity analysis for technology investments",
      "Business model analysis and revenue impact assessment",
      "Vendor evaluation and procurement decision support",
      "Partnership opportunity identification and evaluation",
      "Risk assessment for technology adoption and implementation",
      "ROI analysis and business case development"
    ],
    "tools": [
      "Read",
      "Grep",
      "Glob",
      "LS",
      "TodoWrite",
      "WebFetch"
    ],
    "coordination_patterns": [
      "**Technology + Business**: Collaborate with product-strategist for market context",
      "**Technology + Security**: coordinate with specialists for security audit work for security implications",
      "**Technology + Architecture**: Validate findings with principal-architect for system impact",
      "**Implementation Readiness**: Work with implementation agents to assess practical feasibility",
      "Maintain centralized research database accessible to all agents",
      "Tag research by domain, technology, industry, and recency for easy discovery",
      "Create research update schedules for evolving technology landscapes",
      "Establish research request templates for consistent quality and scope"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Use for technology evaluation, market analysis, and competitive research. MUST BE USED for vendor comparisons, industry best practices, and emerging technology assessment",
    "color": "purple"
  },
  {
    "name": "search-coordinator",
    "file": "search-coordinator.md",
    "capabilities": [
      "Combine multiple search patterns efficiently",
      "Execute parallel searches across file types",
      "Optimize search scope and performance",
      "Aggregate results intelligently",
      "Find conceptually related code",
      "Search across comments and documentation",
      "Identify usage patterns",
      "Map code relationships",
      "Find all usages of symbols",
      "Track data flow paths",
      "Identify dependency chains",
      "Map API usage patterns",
      "Minimize search execution time",
      "Reduce redundant searches",
      "Cache common patterns",
      "Prioritize likely locations"
    ],
    "tools": [
      "grep",
      "glob",
      "bash"
    ],
    "coordination_patterns": [
      "grep",
      "glob",
      "bash",
      "read",
      "**With codebase-analyst**: For comprehensive analysis",
      "**With refactoring-assistant**: For large-scale changes",
      "**With documentation-finder**: For doc searches",
      "**With error-resolver**: For error pattern matching"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Orchestrates complex multi-pattern searches with maximum efficiency",
    "color": "yellow"
  },
  {
    "name": "security-auditor",
    "file": "security-auditor.md",
    "capabilities": [],
    "tools": [
      "Read",
      "Grep",
      "Glob",
      "LS",
      "Bash",
      "TodoWrite"
    ],
    "coordination_patterns": [],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Use for security audits, vulnerability assessment, and compliance reviews. MUST BE USED for OWASP Top 10 checks, threat modeling, and security remediation guidance",
    "color": "green"
  },
  {
    "name": "security-tester",
    "file": "security-tester.md",
    "capabilities": [],
    "tools": [
      "Read",
      "Grep",
      "Glob",
      "LS",
      "Bash"
    ],
    "coordination_patterns": [],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Use for penetration testing, security scanning, and automated security testing. MUST BE USED for SAST/DAST implementation, API security testing, and CI/CD security integration",
    "color": "green"
  },
  {
    "name": "tech-writer",
    "file": "tech-writer.md",
    "capabilities": [],
    "tools": [
      "Read",
      "Write",
      "Edit",
      "Grep",
      "Glob",
      "LS",
      "TodoWrite",
      "WebFetch"
    ],
    "coordination_patterns": [
      "A /plan execution reaches completion needing comprehensive documentation",
      "Complex refactoring or architectural changes requiring doc updates",
      "work with specialists for project coordination and orchestration work to ensure comprehensive project documentation",
      "coordinate with specialists for agent audit and compliance work to maintain documentation coverage metrics",
      "Integrate completion summaries into overall project documentation strategy",
      "Maintain documentation change logs and version control integration",
      "Ensure completion summaries are actionable and informative",
      "Maintain consistency in reporting format and terminology",
      "Provide clear next steps for documentation maintenance",
      "Track documentation debt and improvement opportunities"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Use PROACTIVELY for documentation, READMEs, API docs, and work summaries. MUST BE USED after complex implementations, code changes, or when explaining technical concepts",
    "color": "orange"
  },
  {
    "name": "test-engineer",
    "file": "test-engineer.md",
    "capabilities": [],
    "tools": [
      "Read",
      "Write",
      "Edit",
      "MultiEdit",
      "Grep",
      "Glob",
      "LS",
      "Bash",
      "TodoWrite"
    ],
    "coordination_patterns": [
      "Provide clear testing guidelines and best practices documentation",
      "Conduct test plan reviews and quality assessments",
      "Mentor developers on testing practices and TDD/BDD methodologies",
      "Establish code review standards that include test quality evaluation",
      "Create testing templates and reusable test utilities",
      "Implement comprehensive test metrics including coverage, execution time, and flakiness",
      "Create quality reports that communicate testing status to stakeholders",
      "Establish SLAs for test execution and quality gates",
      "Monitor and optimize test suite performance and reliability",
      "Track and report on defect escape rates and quality trends"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Use for test strategy, test implementation, and quality assurance. MUST BE USED for test pyramid design, coverage analysis, and CI/CD test automation",
    "color": "green"
  },
  {
    "name": "test-runner",
    "file": "test-runner.md",
    "capabilities": [
      "Auto-detect test frameworks in use",
      "Identify test file patterns",
      "Locate test configurations",
      "Determine test command patterns",
      "Run only relevant tests",
      "Execute tests in optimal order",
      "Parallelize when possible",
      "Handle test dependencies",
      "Extract failure context efficiently",
      "Identify flaky tests",
      "Group related failures",
      "Suggest targeted fixes",
      "Identify untested code",
      "Suggest missing test cases",
      "Run coverage analysis",
      "Generate coverage reports"
    ],
    "tools": [
      "bash",
      "read",
      "glob"
    ],
    "coordination_patterns": [
      "**With test-engineer**: For test creation and strategy",
      "**With 0**: For comprehensive test planning",
      "**With error-resolver**: For fixing test failures",
      "**With ci-cd-engineer**: For test pipeline optimization"
    ],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Auto-detects test frameworks and efficiently runs relevant tests",
    "color": "green"
  },
  {
    "name": "ui-designer",
    "file": "ui-designer.md",
    "capabilities": [],
    "tools": [
      "Read",
      "Write",
      "Edit",
      "Grep",
      "Glob",
      "LS",
      "TodoWrite"
    ],
    "coordination_patterns": [],
    "parallel_compatible": [],
    "handoff_patterns": [],
    "unique_expertise": [],
    "when_to_use": [],
    "orchestration_notes": [],
    "description": "Use for UI/UX design, visual hierarchy, and design systems. MUST BE USED for accessibility compliance, responsive design, and minimalist interface optimization",
    "color": "red"
  }
]